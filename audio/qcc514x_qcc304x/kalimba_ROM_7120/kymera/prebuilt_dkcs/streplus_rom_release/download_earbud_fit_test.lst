
/home/svc-audio-dspsw/kymera_builds/builds/2022/kymera_2203310850/kalimba/kymera/tools/KCSMaker/out/7120/streplus_rom_release/download/debugbin/download_earbud_fit_test.elf:     file format elf32-littlekalimba

Disassembly of section .text_minim:

84200254 <$_eft_create>:
Capability API Handlers
*/

bool eft_create(OPERATOR_DATA *op_data, void *message_data,
                      unsigned *response_id, void **resp_data)
{
84200254:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84200256:	10 09       	r6 = r0 + Null;
84200258:	19 09       	r7 = r1 + Null;
8420025a:	27 00       	r5 = r2 + Null;
8420025c:	2a 09       	r8 = r3 + Null;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
8420025e:	ff fd 01 f0 	call (m) 0x4e6;
84200262:	29 e4 
84200264:	16 00       	r4 = r0 + Null;
     * explicitly initialized are 0.
     */

    L5_DBG_MSG1("EFT Create: p_ext_data at %p", p_ext_data);

    if (!base_op_create(op_data, message_data, response_id, resp_data))
84200266:	55 08       	r3 = r8 + Null;
84200268:	3c 00       	r2 = r5 + Null;
8420026a:	4b 08       	r1 = r7 + Null;
8420026c:	42 08       	r0 = r6 + Null;
8420026e:	ff fd 00 f0 	call (m) 0x35a;
84200272:	2d e7 
84200274:	10 04       	Null = r0 - Null;
84200276:	41 60       	if EQ jump (m) Lc_eft_create_10;

84200278 <Lc_eft_create_2>:
 * \param  response_data Pointer to the pointer to message that is allocated in the function.
 * \param  new_status  A status ID that is to be sent in the message.
 */
inline static void base_op_change_response_status(void **response_data, STATUS_KYMERA new_status)
{
    (((OP_STD_RSP *)(*response_data))->status = new_status);
84200278:	01 f0 00 60 	rMAC = Null + 4096;
8420027c:	a2 f0 00 e8 	r0 = M[r8 + Null];
84200280:	51 8e       	M[r0 + 4] = rMAC;
84200282:	31 00       	rMAC = r4 + Null;
     * termination point in create then change it to STATUS_OK.
     */
    base_op_change_response_status(resp_data, STATUS_CMD_FAILED);

    /* Initialize buffers */
    for (i = 0; i < EFT_MAX_SINKS; i++)
84200284:	14 71       	r10 = Null + 2;
84200286:	03 4c       	do (m) Lc__loop0;

84200288 <Lc_eft_create_3>:
    {
        p_ext_data->inputs[i] = NULL;
84200288:	08 ee       	M[rMAC + Null] = Null;
8420028a:	09 21       	rMAC = rMAC + 4;

8420028c <Lc__loop0>:
     * termination point in create then change it to STATUS_OK.
     */
    base_op_change_response_status(resp_data, STATUS_CMD_FAILED);

    /* Initialize buffers */
    for (i = 0; i < EFT_MAX_SINKS; i++)
8420028c:	31 22       	rMAC = r4 + 8;
    {
        p_ext_data->inputs[i] = NULL;
    }

    for (i = 0; i < EFT_NUM_METADATA_CHANNELS; i++)
8420028e:	14 71       	r10 = Null + 2;
84200290:	03 4c       	do (m) Lc__loop1;

84200292 <Lc_eft_create_5>:
    {
        p_ext_data->metadata_ip[i] = NULL;
84200292:	08 ee       	M[rMAC + Null] = Null;
84200294:	09 21       	rMAC = rMAC + 4;

84200296 <Lc__loop1>:
    for (i = 0; i < EFT_MAX_SINKS; i++)
    {
        p_ext_data->inputs[i] = NULL;
    }

    for (i = 0; i < EFT_NUM_METADATA_CHANNELS; i++)
84200296:	21 f0 a2 40 	rMAC = Null + 16546;
8420029a:	f1 8f       	M[r4 + 28] = rMAC;
    }

    /* Initialize capid and sample rate fields */
    p_ext_data->cap_id = EARBUD_FIT_TEST_16K_CAP_ID;

    p_ext_data->sample_rate = 16000;
8420029c:	11 f0 80 7a 	rMAC = Null + 16000;
842002a0:	b1 8f       	M[r4 + 24] = rMAC;
    /* Initialize parameters */
    p_default_params = (unsigned*) EARBUD_FIT_TEST_GetDefaults(p_ext_data->cap_id);
842002a2:	22 f0 a2 40 	r0 = Null + 16546;
842002a6:	05 f0 35 e1 	call (m) $_EARBUD_FIT_TEST_GetDefaults;
842002aa:	13 00       	r1 = r0 + Null;
    p_cap_params = (unsigned*) &p_ext_data->eft_cap_params;
842002ac:	34 30       	r2 = r4 + 32;
    if(!cpsInitParameters(&p_ext_data->params_def,
                          p_default_params,
                          p_cap_params,
                          sizeof(EARBUD_FIT_TEST_PARAMETERS)))
842002ae:	05 28       	r3 = Null + 16;
842002b0:	62 f0 44 20 	r0 = r4 + 68;
842002b4:	ff fd 02 f0 	call (m) 0x742;
842002b8:	2f e4 
842002ba:	10 04       	Null = r0 - Null;
842002bc:	23 60       	if EQ jump (m) Lc_eft_create_12;

842002be <Lc_eft_create_7>:
    {
       return TRUE;
    }

    /* Initialize system mode */
    p_ext_data->cur_mode = EARBUD_FIT_TEST_SYSMODE_FULL;
842002be:	41 20       	rMAC = Null + 1;
842002c0:	31 9f       	M[r4 + 48] = rMAC;
    p_ext_data->host_mode = EARBUD_FIT_TEST_SYSMODE_FULL;
842002c2:	b1 9f       	M[r4 + 56] = rMAC;
    p_ext_data->qact_mode = EARBUD_FIT_TEST_SYSMODE_FULL;
842002c4:	f1 9f       	M[r4 + 60] = rMAC;

    /* Trigger re-initialization at start */
    p_ext_data->re_init_flag = TRUE;
842002c6:	0f 00       	r5 = rMAC + Null;
842002c8:	67 f0 43 8a 	MB[r4 + 67] = r5;

    p_ext_data->p_tmp_ref_ip = cbuffer_create_with_malloc(
                                EFT_INTERNAL_BUFFER_SIZE, BUF_DESC_SW_BUFFER);
842002cc:	02 f0 41 40 	r0 = Null + 65;
842002d0:	03 00       	r1 = Null + Null;
842002d2:	ff fd 9f f0 	call (m) 0x142c6;
842002d6:	35 ef 
842002d8:	32 8f       	M[r4 + 16] = r0;
    if (p_ext_data->p_tmp_ref_ip == NULL)
842002da:	31 89       	rMAC = M[r4 + 16];
842002dc:	15 62       	if NE jump (m) Lc_eft_create_13;

842002de <Lc_eft_create_8>:
    {
        eft_proc_destroy(p_ext_data);
842002de:	32 00       	r0 = r4 + Null;
842002e0:	04 f0 2f ec 	call (m) Lc_eft_proc_destroy_1;
        L2_DBG_MSG("EFT failed to allocate reference input buffer");
842002e4:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842002e8:	88 24       	Null = rMAC - 2;
842002ea:	07 68       	if LT jump (m) Lc_eft_create_10;

842002ec <Lc_eft_create_9>:
842002ec:	55 f1 02 f0 	r0 = Null + 357564474;
842002f0:	3a 40 
842002f2:	ff fd 04 f0 	call (m) 0xccc;
842002f6:	3b ee 

842002f8 <Lc_eft_create_10>:

    L5_DBG_MSG1("EFT Create: p_ext_data at %p", p_ext_data);

    if (!base_op_create(op_data, message_data, response_id, resp_data))
    {
        return FALSE;
842002f8:	02 00       	r0 = Null + Null;
842002fa:	cb 6e       	jump (m) Lc_eft_create_42;

842002fc <Lc_eft_create_11>:
842002fc:	a1 f0 00 e8 	rMAC = M[r8 + Null];
84200300:	48 8e       	M[rMAC + 4] = Null;

84200302 <Lc_eft_create_12>:
    if(!cpsInitParameters(&p_ext_data->params_def,
                          p_default_params,
                          p_cap_params,
                          sizeof(EARBUD_FIT_TEST_PARAMETERS)))
    {
       return TRUE;
84200302:	42 20       	r0 = Null + 1;
84200304:	c6 6e       	jump (m) Lc_eft_create_42;

84200306 <Lc_eft_create_13>:
        L2_DBG_MSG("EFT failed to allocate reference input buffer");
        return FALSE;
    }

    p_ext_data->p_tmp_int_ip = cbuffer_create_with_malloc(
                                EFT_INTERNAL_BUFFER_SIZE, BUF_DESC_SW_BUFFER);
84200306:	02 f0 41 40 	r0 = Null + 65;
8420030a:	03 00       	r1 = Null + Null;
8420030c:	ff fd 9f f0 	call (m) 0x142c6;
84200310:	3b ed 
84200312:	72 8f       	M[r4 + 20] = r0;
    if (p_ext_data->p_tmp_int_ip == NULL)
84200314:	71 89       	rMAC = M[r4 + 20];
84200316:	0f 62       	if NE jump (m) Lc_eft_create_16;

84200318 <Lc_eft_create_14>:
    {
        eft_proc_destroy(p_ext_data);
84200318:	32 00       	r0 = r4 + Null;
8420031a:	04 f0 35 ea 	call (m) Lc_eft_proc_destroy_1;
        L2_DBG_MSG("EFT failed to allocate int mic input buffer");
8420031e:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200322:	88 24       	Null = rMAC - 2;
84200324:	ea 69       	if LT jump (m) Lc_eft_create_10;

84200326 <Lc_eft_create_15>:
84200326:	55 f1 02 f0 	r0 = Null + 357564520;
8420032a:	68 40 
8420032c:	ff fd 04 f0 	call (m) 0xccc;
84200330:	21 ed 
84200332:	e3 6f       	jump (m) Lc_eft_create_10;

84200334 <Lc_eft_create_16>:
        return FALSE;
    }

    /* Allocate twiddle factor for AFB */
    if (!aanc_afb_twiddle_alloc(AANC_FILTER_BANK_WINDOW_SIZE))
84200334:	02 f0 80 40 	r0 = Null + 128;
84200338:	ff fd a5 f3 	call 0x74f20;
8420033c:	28 ef 
8420033e:	10 04       	Null = r0 - Null;
84200340:	0f 62       	if NE jump (m) Lc_eft_create_19;

84200342 <Lc_eft_create_17>:
    {
        eft_proc_destroy(p_ext_data);
84200342:	32 00       	r0 = r4 + Null;
84200344:	04 f0 2b e9 	call (m) Lc_eft_proc_destroy_1;
        L2_DBG_MSG("EFT failed to allocate twiddle factors");
84200348:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420034c:	88 24       	Null = rMAC - 2;
8420034e:	d5 69       	if LT jump (m) Lc_eft_create_10;

84200350 <Lc_eft_create_18>:
84200350:	55 f1 02 f0 	r0 = Null + 357564564;
84200354:	94 40 
84200356:	ff fd 04 f0 	call (m) 0xccc;
8420035a:	37 eb 
8420035c:	ce 6f       	jump (m) Lc_eft_create_10;

8420035e <Lc_eft_create_19>:
        return FALSE;
    }
    p_ext_data->twiddle_registered = TRUE;
8420035e:	67 f0 75 8a 	MB[r4 + 117] = r5;

    /* Register scratch memory for AFB & allocate object */
    if (!scratch_register())
84200362:	ff fd 0a f0 	call (m) 0x17fe;
84200366:	3d e4 
84200368:	10 04       	Null = r0 - Null;
8420036a:	0f 62       	if NE jump (m) Lc_eft_create_22;

8420036c <Lc_eft_create_20>:
    {
        eft_proc_destroy(p_ext_data);
8420036c:	32 00       	r0 = r4 + Null;
8420036e:	04 f0 21 e8 	call (m) Lc_eft_proc_destroy_1;
        L2_DBG_MSG("EFT failed to register scratch memory");
84200372:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200376:	88 24       	Null = rMAC - 2;
84200378:	c0 69       	if LT jump (m) Lc_eft_create_10;

8420037a <Lc_eft_create_21>:
8420037a:	55 f1 02 f0 	r0 = Null + 357564603;
8420037e:	bb 40 
84200380:	ff fd 04 f0 	call (m) 0xccc;
84200384:	2d ea 
84200386:	b9 6f       	jump (m) Lc_eft_create_10;

84200388 <Lc_eft_create_22>:
        return FALSE;
    }

    p_ext_data->scratch_registered = TRUE;
84200388:	67 f0 74 8a 	MB[r4 + 116] = r5;

    if (!scratch_reserve(AANC_AFB_SCRATCH_MEMORY, MALLOC_PREFERENCE_DM1) ||
        !scratch_reserve(AANC_AFB_SCRATCH_MEMORY, MALLOC_PREFERENCE_DM2) ||
        !scratch_reserve(AANC_AFB_SCRATCH_MEMORY, MALLOC_PREFERENCE_DM2))
8420038c:	3b 00       	r1 = r5 + Null;
8420038e:	02 f0 00 42 	r0 = Null + 512;
84200392:	ff fd 0a f0 	call (m) 0x190a;
84200396:	39 eb 
84200398:	10 04       	Null = r0 - Null;
8420039a:	11 60       	if EQ jump (m) Lc_eft_create_25;

8420039c <Lc_eft_create_23>:
8420039c:	83 20       	r1 = Null + 2;
8420039e:	02 f0 00 42 	r0 = Null + 512;
842003a2:	ff fd 0a f0 	call (m) 0x190a;
842003a6:	29 eb 
842003a8:	10 04       	Null = r0 - Null;
842003aa:	09 60       	if EQ jump (m) Lc_eft_create_25;

842003ac <Lc_eft_create_24>:
842003ac:	83 20       	r1 = Null + 2;
842003ae:	02 f0 00 42 	r0 = Null + 512;
842003b2:	ff fd 0a f0 	call (m) 0x190a;
842003b6:	39 ea 
842003b8:	10 04       	Null = r0 - Null;
842003ba:	0f 62       	if NE jump (m) Lc_eft_create_27;

842003bc <Lc_eft_create_25>:
    {
        eft_proc_destroy(p_ext_data);
842003bc:	32 00       	r0 = r4 + Null;
842003be:	04 f0 31 e5 	call (m) Lc_eft_proc_destroy_1;
        L2_DBG_MSG("EFT failed to reserve scratch memory");
842003c2:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842003c6:	88 24       	Null = rMAC - 2;
842003c8:	98 69       	if LT jump (m) Lc_eft_create_10;

842003ca <Lc_eft_create_26>:
842003ca:	55 f1 02 f0 	r0 = Null + 357564641;
842003ce:	e1 40 
842003d0:	ff fd 04 f0 	call (m) 0xccc;
842003d4:	3d e7 
842003d6:	91 6f       	jump (m) Lc_eft_create_10;

842003d8 <Lc_eft_create_27>:
        return FALSE;
    }

    p_ext_data->p_afb_ref = xzpmalloc(aanc_afb_bytes());
842003d8:	04 f0 39 ec 	call (m) $_aanc_afb_bytes;
842003dc:	c3 20       	r1 = Null + 3;
842003de:	ff fd 32 f0 	call (m) 0x68a6;
842003e2:	29 e6 
    if (p_ext_data->p_afb_ref == NULL)
842003e4:	72 be       	M[r4 + 100] = r0;
842003e6:	0e 62       	if NE jump (m) Lc_eft_create_31;

842003e8 <Lc_eft_create_28>:
    {
        L2_DBG_MSG("EFT failed to allocate AFB ref");
842003e8:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842003ec:	88 24       	Null = rMAC - 2;
842003ee:	07 68       	if LT jump (m) Lc_eft_create_30;

842003f0 <Lc_eft_create_29>:
842003f0:	55 f1 02 f0 	r0 = Null + 357564678;
842003f4:	06 41 
842003f6:	ff fd 04 f0 	call (m) 0xccc;
842003fa:	37 e6 

842003fc <Lc_eft_create_30>:
        eft_proc_destroy(p_ext_data);
842003fc:	32 00       	r0 = r4 + Null;
842003fe:	04 f0 31 e3 	call (m) Lc_eft_proc_destroy_1;

84200402 <Lc_eft_create_31>:
    }
    aanc_afb_create(p_ext_data->p_afb_ref);
84200402:	72 b8       	r0 = M[r4 + 100];
84200404:	04 f0 33 eb 	call (m) $_aanc_afb_create;

    p_ext_data->p_afb_int = xzpmalloc(aanc_afb_bytes());
84200408:	04 f0 29 eb 	call (m) $_aanc_afb_bytes;
8420040c:	c3 20       	r1 = Null + 3;
8420040e:	ff fd 32 f0 	call (m) 0x68a6;
84200412:	39 e4 
    if (p_ext_data->p_afb_int == NULL)
84200414:	b2 be       	M[r4 + 104] = r0;
84200416:	0e 62       	if NE jump (m) Lc_eft_create_35;

84200418 <Lc_eft_create_32>:
    {
        L2_DBG_MSG("EFT failed to allocate AFB int");
84200418:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420041c:	88 24       	Null = rMAC - 2;
8420041e:	07 68       	if LT jump (m) Lc_eft_create_34;

84200420 <Lc_eft_create_33>:
84200420:	55 f1 02 f0 	r0 = Null + 357564709;
84200424:	25 41 
84200426:	ff fd 04 f0 	call (m) 0xccc;
8420042a:	27 e5 

8420042c <Lc_eft_create_34>:
        eft_proc_destroy(p_ext_data);
8420042c:	32 00       	r0 = r4 + Null;
8420042e:	04 f0 21 e2 	call (m) Lc_eft_proc_destroy_1;

84200432 <Lc_eft_create_35>:
    }
    aanc_afb_create(p_ext_data->p_afb_int);
84200432:	b2 b8       	r0 = M[r4 + 104];
84200434:	04 f0 23 ea 	call (m) $_aanc_afb_create;

    p_ext_data->p_fit = xzpmalloc(aanc_fit100_bytes());
84200438:	05 f0 37 e4 	call (m) $_aanc_fit100_bytes;
8420043c:	c3 20       	r1 = Null + 3;
8420043e:	ff fd 32 f0 	call (m) 0x68a6;
84200442:	29 e3 
    if (p_ext_data->p_fit == NULL)
84200444:	f2 be       	M[r4 + 108] = r0;
84200446:	0e 62       	if NE jump (m) Lc_eft_create_39;

84200448 <Lc_eft_create_36>:
    {
        L2_DBG_MSG("EFT failed to allocate fit100");
84200448:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420044c:	88 24       	Null = rMAC - 2;
8420044e:	07 68       	if LT jump (m) Lc_eft_create_38;

84200450 <Lc_eft_create_37>:
84200450:	55 f1 02 f0 	r0 = Null + 357564740;
84200454:	44 41 
84200456:	ff fd 04 f0 	call (m) 0xccc;
8420045a:	37 e3 

8420045c <Lc_eft_create_38>:
        eft_proc_destroy(p_ext_data);
8420045c:	32 00       	r0 = r4 + Null;
8420045e:	04 f0 31 e0 	call (m) Lc_eft_proc_destroy_1;

84200462 <Lc_eft_create_39>:
    }
    aanc_fit100_create(p_ext_data->p_fit);
84200462:	f2 b8       	r0 = M[r4 + 108];
84200464:	05 f0 2f e3 	call (m) $_aanc_fit100_create;

    if (!load_aanc_handle(&p_ext_data->f_handle))
84200468:	62 f0 70 20 	r0 = r4 + 112;
8420046c:	04 f0 35 e4 	call (m) $_load_aanc_handle;
84200470:	10 04       	Null = r0 - Null;
84200472:	45 63       	if NE jump (m) Lc_eft_create_11;

84200474 <Lc_eft_create_40>:
    {
        eft_proc_destroy(p_ext_data);
84200474:	32 00       	r0 = r4 + Null;
84200476:	03 f0 39 ef 	call (m) Lc_eft_proc_destroy_1;
        L2_DBG_MSG("EFT failed to load feature handle");
8420047a:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420047e:	88 24       	Null = rMAC - 2;
84200480:	3c 69       	if LT jump (m) Lc_eft_create_10;

84200482 <Lc_eft_create_41>:
84200482:	55 f1 02 f0 	r0 = Null + 357564770;
84200486:	62 41 
84200488:	ff fd 04 f0 	call (m) 0xccc;
8420048c:	25 e2 
8420048e:	35 6f       	jump (m) Lc_eft_create_10;

84200490 <Lc_eft_create_42>:
    /* Operator creation was succesful, change respone to STATUS_OK*/
    base_op_change_response_status(resp_data, STATUS_OK);

    L4_DBG_MSG("EFT: Created");
    return TRUE;
}
84200490:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84200492:	d8 4c       	rts;

84200494 <$_eft_destroy>:

bool eft_destroy(OPERATOR_DATA *op_data, void *message_data,
                  unsigned *response_id, void **resp_data)
{
84200494:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84200496:	10 09       	r6 = r0 + Null;
84200498:	1a 09       	r8 = r1 + Null;
8420049a:	27 00       	r5 = r2 + Null;
8420049c:	29 09       	r7 = r3 + Null;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
8420049e:	ff fd 00 f0 	call (m) 0x4e6;
842004a2:	29 e2 
842004a4:	16 00       	r4 = r0 + Null;
                  unsigned *response_id, void **resp_data)
{
    EFT_OP_DATA *p_ext_data = get_instance_data(op_data);

    /* call base_op destroy that creates and fills response message, too */
    if (!base_op_destroy(op_data, message_data, response_id, resp_data))
842004a6:	4d 08       	r3 = r7 + Null;
842004a8:	3c 00       	r2 = r5 + Null;
842004aa:	53 08       	r1 = r8 + Null;
842004ac:	42 08       	r0 = r6 + Null;
842004ae:	ef fd ff ff 	call (m) 0x370;
842004b2:	23 e6 
842004b4:	10 04       	Null = r0 - Null;
842004b6:	03 62       	if NE jump (m) Lc_eft_destroy_3;

842004b8 <Lc_eft_destroy_2>:
    {
        return FALSE;
842004b8:	02 00       	r0 = Null + Null;
842004ba:	07 6e       	jump (m) Lc_eft_destroy_6;

842004bc <Lc_eft_destroy_3>:
    }

    /* TODO: patch functions */

    if (p_ext_data != NULL)
842004bc:	30 04       	Null = r4 - Null;
842004be:	04 60       	if EQ jump (m) Lc_eft_destroy_5;

842004c0 <Lc_eft_destroy_4>:
    {
        eft_proc_destroy(p_ext_data);
842004c0:	32 00       	r0 = r4 + Null;
842004c2:	03 f0 2d ed 	call (m) Lc_eft_proc_destroy_1;

842004c6 <Lc_eft_destroy_5>:
        L4_DBG_MSG("EFT: Cleanup complete.");
    }

    L4_DBG_MSG("EFT: Destroyed");
    return TRUE;
842004c6:	42 20       	r0 = Null + 1;

842004c8 <Lc_eft_destroy_6>:
}
842004c8:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
842004ca:	d8 4c       	rts;

842004cc <$_eft_start>:

bool eft_start(OPERATOR_DATA *op_data, void *message_data,
                     unsigned *response_id, void **resp_data)
{
842004cc:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
842004ce:	10 09       	r6 = r0 + Null;
842004d0:	2e 00       	r4 = r3 + Null;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
842004d2:	ff fd 00 f0 	call (m) 0x4e6;
842004d6:	35 e0 
842004d8:	17 00       	r5 = r0 + Null;
{
    EFT_OP_DATA *p_ext_data = get_instance_data(op_data);
    /* TODO: patch functions */

    /* Start with the assumption that we fail and change later if we succeed */
    if (!base_op_build_std_response_ex(op_data, STATUS_CMD_FAILED, resp_data))
842004da:	03 f0 00 60 	r1 = Null + 4096;
842004de:	34 00       	r2 = r4 + Null;
842004e0:	42 08       	r0 = r6 + Null;
842004e2:	ef fd ff ff 	call (m) 0x4bc;
842004e6:	3b ee 
842004e8:	10 04       	Null = r0 - Null;
842004ea:	03 62       	if NE jump (m) Lc_eft_start_3;

842004ec <Lc_eft_start_2>:
    {
        return FALSE;
842004ec:	02 00       	r0 = Null + Null;
842004ee:	0b 6e       	jump (m) Lc_eft_start_7;

842004f0 <Lc_eft_start_3>:
    }

    /* Check that we have a minimum number of terminals connected */
    if (p_ext_data->inputs[EFT_PLAYBACK_TERMINAL_ID] == NULL ||
        p_ext_data->inputs[EFT_MIC_INT_TERMINAL_ID] == NULL)
842004f0:	39 e8       	rMAC = M[r5 + Null];
842004f2:	08 60       	if EQ jump (m) Lc_eft_start_6;

842004f4 <Lc_eft_start_4>:
842004f4:	79 88       	rMAC = M[r5 + 4];
842004f6:	06 60       	if EQ jump (m) Lc_eft_start_6;

842004f8 <Lc_eft_start_5>:
        L4_DBG_MSG("EFT start failure: inputs not connected");
        return TRUE;
    }

    /* Set reinitialization flags to ensure first run behavior */
    p_ext_data->re_init_flag = TRUE;
842004f8:	41 20       	rMAC = Null + 1;
842004fa:	71 f0 43 8a 	MB[r5 + 67] = rMAC;
842004fe:	31 e8       	rMAC = M[r4 + Null];
84200500:	48 8e       	M[rMAC + 4] = Null;

84200502 <Lc_eft_start_6>:
    /* Check that we have a minimum number of terminals connected */
    if (p_ext_data->inputs[EFT_PLAYBACK_TERMINAL_ID] == NULL ||
        p_ext_data->inputs[EFT_MIC_INT_TERMINAL_ID] == NULL)
    {
        L4_DBG_MSG("EFT start failure: inputs not connected");
        return TRUE;
84200502:	42 20       	r0 = Null + 1;

84200504 <Lc_eft_start_7>:
    /* All good */
    base_op_change_response_status(resp_data, STATUS_OK);

    L4_DBG_MSG("EFT Started");
    return TRUE;
}
84200504:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200506:	d8 4c       	rts;

84200508 <$_eft_reset>:

bool eft_reset(OPERATOR_DATA *op_data, void *message_data,
                     unsigned *response_id, void **resp_data)
{
84200508:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
8420050a:	16 00       	r4 = r0 + Null;
8420050c:	1a 09       	r8 = r1 + Null;
8420050e:	27 00       	r5 = r2 + Null;
84200510:	29 09       	r7 = r3 + Null;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
84200512:	ef fd ff ff 	call (m) 0x4e6;
84200516:	35 ee 
84200518:	10 09       	r6 = r0 + Null;
bool eft_reset(OPERATOR_DATA *op_data, void *message_data,
                     unsigned *response_id, void **resp_data)
{
    EFT_OP_DATA *p_ext_data = get_instance_data(op_data);

    if (!base_op_reset(op_data, message_data, response_id, resp_data))
8420051a:	4d 08       	r3 = r7 + Null;
8420051c:	3c 00       	r2 = r5 + Null;
8420051e:	53 08       	r1 = r8 + Null;
84200520:	32 00       	r0 = r4 + Null;
84200522:	ef fd ff ff 	call (m) 0x32c;
84200526:	2b e0 
84200528:	10 04       	Null = r0 - Null;
8420052a:	03 62       	if NE jump (m) Lc_eft_reset_3;

8420052c <Lc_eft_reset_2>:
    {
        return FALSE;
8420052c:	02 00       	r0 = Null + Null;
8420052e:	05 6e       	jump (m) Lc_eft_reset_4;

84200530 <Lc_eft_reset_3>:
    }

    p_ext_data->re_init_flag = TRUE;
84200530:	41 20       	rMAC = Null + 1;
84200532:	81 f0 43 8a 	MB[r6 + 67] = rMAC;

    L4_DBG_MSG("EFT: Reset");
    return TRUE;
84200536:	0a 00       	r0 = rMAC + Null;

84200538 <Lc_eft_reset_4>:
}
84200538:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
8420053a:	d8 4c       	rts;

8420053c <$_eft_connect>:

bool eft_connect(OPERATOR_DATA *op_data, void *message_data,
                       unsigned *response_id, void **resp_data)
{
8420053c:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
8420053e:	17 00       	r5 = r0 + Null;
84200540:	19 09       	r7 = r1 + Null;
84200542:	2e 00       	r4 = r3 + Null;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
84200544:	ef fd ff ff 	call (m) 0x4e6;
84200548:	23 ed 
8420054a:	10 09       	r6 = r0 + Null;
    unsigned terminal_id, terminal_num;
    tCbuffer* pterminal_buf;

    /* Create the response. If there aren't sufficient resources for this fail
     * early. */
    if (!base_op_build_std_response_ex(op_data, STATUS_OK, resp_data))
8420054c:	03 00       	r1 = Null + Null;
8420054e:	34 00       	r2 = r4 + Null;
84200550:	3a 00       	r0 = r5 + Null;
84200552:	ef fd ff ff 	call (m) 0x4bc;
84200556:	2b eb 
84200558:	10 04       	Null = r0 - Null;
8420055a:	03 62       	if NE jump (m) Lc_eft_connect_3;

8420055c <Lc_eft_connect_2>:
    {
        return FALSE;
8420055c:	02 00       	r0 = Null + Null;
8420055e:	22 6e       	jump (m) Lc_eft_connect_11;

84200560 <Lc_eft_connect_3>:
    }

    /* Only sink terminal can be connected */
    terminal_id = OPMGR_GET_OP_CONNECT_TERMINAL_ID(message_data);
84200560:	91 f0 00 e8 	rMAC = M[r7 + Null];
    terminal_num = terminal_id & TERMINAL_NUM_MASK;
84200564:	8a c2       	r0 = rMAC AND 0x3f;
    L4_DBG_MSG1("EFT connect: sink terminal %u", terminal_num);

    /* Can't use invalid ID */
    if (terminal_num >= EFT_MAX_SINKS)
84200566:	90 24       	Null = r0 - 2;
84200568:	07 64       	if NC jump (m) Lc_eft_connect_6;

8420056a <Lc_eft_connect_4>:
8420056a:	01 f0 03 60 	rMAC = Null + 4099;
8420056e:	32 e8       	r0 = M[r4 + Null];
84200570:	51 8e       	M[r0 + 4] = rMAC;

84200572 <Lc_eft_connect_5>:
    {
        /* invalid terminal id */
        L4_DBG_MSG1("EFT connect failed: invalid terminal %u", terminal_num);
        base_op_change_response_status(resp_data, STATUS_INVALID_CMD_PARAMS);
        return TRUE;
84200572:	42 20       	r0 = Null + 1;
84200574:	17 6e       	jump (m) Lc_eft_connect_11;

84200576 <Lc_eft_connect_6>:
    }

    /* Can't connect if already connected */
    if (p_ext_data->inputs[terminal_num] != NULL)
84200576:	52 54       	r0 = r0 LSHIFT 2;
84200578:	10 0d       	r6 = r0 + r6;
8420057a:	81 f0 00 e8 	rMAC = M[r6 + Null];
8420057e:	06 60       	if EQ jump (m) Lc_eft_connect_8;

84200580 <Lc_eft_connect_7>:
84200580:	01 f0 00 60 	rMAC = Null + 4096;
84200584:	32 e8       	r0 = M[r4 + Null];
84200586:	51 8e       	M[r0 + 4] = rMAC;
84200588:	f5 6f       	jump (m) Lc_eft_connect_5;

8420058a <Lc_eft_connect_8>:
                    terminal_num);
        base_op_change_response_status(resp_data, STATUS_CMD_FAILED);
        return TRUE;
    }

    pterminal_buf = OPMGR_GET_OP_CONNECT_BUFFER(message_data);
8420058a:	91 f0 01 88 	rMAC = M[r7 + 4];
    p_ext_data->inputs[terminal_num] = pterminal_buf;
8420058e:	81 f0 00 ee 	M[r6 + Null] = rMAC;

    if (p_ext_data->metadata_ip[terminal_num] == NULL &&
        buff_has_metadata(pterminal_buf))
84200592:	82 f0 02 88 	r0 = M[r6 + 8];
84200596:	ee 63       	if NE jump (m) Lc_eft_connect_5;

84200598 <Lc_eft_connect_9>:
 *
 * \return TRUE if the buffer supports metadata. FALSE if it doesn't.
 */
static inline bool buff_has_metadata(tCbuffer *buff)
{
    if (buff->metadata != NULL)
84200598:	8a 89       	r0 = M[rMAC + 24];
8420059a:	ec 61       	if EQ jump (m) Lc_eft_connect_5;

8420059c <Lc_eft_connect_10>:
    {
        p_ext_data->metadata_ip[terminal_num] = pterminal_buf;
8420059c:	81 f0 02 8e 	M[r6 + 8] = rMAC;
842005a0:	e9 6f       	jump (m) Lc_eft_connect_5;

842005a2 <Lc_eft_connect_11>:
    }

    return TRUE;
}
842005a2:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
842005a4:	d8 4c       	rts;

842005a6 <$_eft_disconnect>:

bool eft_disconnect(OPERATOR_DATA *op_data, void *message_data,
                          unsigned *response_id, void **resp_data)
{
842005a6:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
842005a8:	17 00       	r5 = r0 + Null;
842005aa:	19 09       	r7 = r1 + Null;
842005ac:	2e 00       	r4 = r3 + Null;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
842005ae:	ef fd ff ff 	call (m) 0x4e6;
842005b2:	39 e9 
842005b4:	10 09       	r6 = r0 + Null;
    EFT_OP_DATA *p_ext_data = get_instance_data(op_data);
    unsigned terminal_id, terminal_num;

    /* Create the response. If there aren't sufficient resources for this fail
     * early. */
    if (!base_op_build_std_response_ex(op_data, STATUS_OK, resp_data))
842005b6:	03 00       	r1 = Null + Null;
842005b8:	34 00       	r2 = r4 + Null;
842005ba:	3a 00       	r0 = r5 + Null;
842005bc:	ef fd ff ff 	call (m) 0x4bc;
842005c0:	21 e8 
842005c2:	10 04       	Null = r0 - Null;
842005c4:	03 62       	if NE jump (m) Lc_eft_disconnect_3;

842005c6 <Lc_eft_disconnect_2>:
    {
        return FALSE;
842005c6:	02 00       	r0 = Null + Null;
842005c8:	1a 6e       	jump (m) Lc_eft_disconnect_9;

842005ca <Lc_eft_disconnect_3>:
    }

    /* Only sink terminal can be disconnected */
    terminal_id = OPMGR_GET_OP_CONNECT_TERMINAL_ID(message_data);
842005ca:	91 f0 00 e8 	rMAC = M[r7 + Null];
    terminal_num = terminal_id & TERMINAL_NUM_MASK;
842005ce:	8a c2       	r0 = rMAC AND 0x3f;
    L4_DBG_MSG1("EFT disconnect: sink terminal %u", terminal_num);

    /* Can't use invalid ID */
    if (terminal_num >= EFT_MAX_SINKS)
842005d0:	90 24       	Null = r0 - 2;
842005d2:	06 64       	if NC jump (m) Lc_eft_disconnect_5;

842005d4 <Lc_eft_disconnect_4>:
842005d4:	01 f0 03 60 	rMAC = Null + 4099;
842005d8:	32 e8       	r0 = M[r4 + Null];
842005da:	51 8e       	M[r0 + 4] = rMAC;
842005dc:	0f 6e       	jump (m) Lc_eft_disconnect_8;

842005de <Lc_eft_disconnect_5>:
        base_op_change_response_status(resp_data, STATUS_INVALID_CMD_PARAMS);
        return TRUE;
    }

    /* Can't disconnect if not connected */
    if (p_ext_data->inputs[terminal_num] == NULL)
842005de:	52 54       	r0 = r0 LSHIFT 2;
842005e0:	10 0d       	r6 = r0 + r6;
842005e2:	81 f0 00 e8 	rMAC = M[r6 + Null];
842005e6:	06 62       	if NE jump (m) Lc_eft_disconnect_7;

842005e8 <Lc_eft_disconnect_6>:
842005e8:	01 f0 00 60 	rMAC = Null + 4096;
842005ec:	32 e8       	r0 = M[r4 + Null];
842005ee:	51 8e       	M[r0 + 4] = rMAC;
842005f0:	05 6e       	jump (m) Lc_eft_disconnect_8;

842005f2 <Lc_eft_disconnect_7>:
        base_op_change_response_status(resp_data, STATUS_CMD_FAILED);
        return TRUE;
    }

    /*  Disconnect the existing metadata and input channel. */
    p_ext_data->metadata_ip[terminal_num] = NULL;
842005f2:	80 f0 02 8e 	M[r6 + 8] = Null;
    p_ext_data->inputs[terminal_num] = NULL;
842005f6:	80 f0 00 ee 	M[r6 + Null] = Null;

842005fa <Lc_eft_disconnect_8>:
    {
        /* invalid terminal id */
        L4_DBG_MSG1("EFT disconnect failed: invalid terminal %u",
                    terminal_num);
        base_op_change_response_status(resp_data, STATUS_INVALID_CMD_PARAMS);
        return TRUE;
842005fa:	42 20       	r0 = Null + 1;

842005fc <Lc_eft_disconnect_9>:
    /*  Disconnect the existing metadata and input channel. */
    p_ext_data->metadata_ip[terminal_num] = NULL;
    p_ext_data->inputs[terminal_num] = NULL;

    return TRUE;
}
842005fc:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
842005fe:	d8 4c       	rts;

84200600 <$_eft_buffer_details>:

bool eft_buffer_details(OPERATOR_DATA *op_data, void *message_data,
                              unsigned *response_id, void **resp_data)
{
84200600:	f6 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>;
84200602:	12 09       	r8 = r0 + Null;
84200604:	18 09       	r6 = r1 + Null;
84200606:	23 09       	r9 = r2 + Null;
84200608:	29 09       	r7 = r3 + Null;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
8420060a:	ef fd ff ff 	call (m) 0x4e6;
8420060e:	3d e6 
84200610:	17 00       	r5 = r0 + Null;

bool eft_buffer_details(OPERATOR_DATA *op_data, void *message_data,
                              unsigned *response_id, void **resp_data)
{
    EFT_OP_DATA *p_ext_data = get_instance_data(op_data);
    unsigned terminal_id = OPMGR_GET_OP_CONNECT_TERMINAL_ID(message_data);
84200612:	81 f0 00 e8 	rMAC = M[r6 + Null];
    /* Response pointer */
    OP_BUF_DETAILS_RSP *p_resp;

#ifndef DISABLE_IN_PLACE
    unsigned terminal_num = terminal_id & TERMINAL_NUM_MASK;
84200616:	8e c2       	r4 = rMAC AND 0x3f;
#endif

    if (!base_op_buffer_details(op_data, message_data, response_id, resp_data))
84200618:	4d 08       	r3 = r7 + Null;
8420061a:	5c 08       	r2 = r9 + Null;
8420061c:	43 08       	r1 = r6 + Null;
8420061e:	52 08       	r0 = r8 + Null;
84200620:	ef fd fe ff 	call (m) 0x37c;
84200624:	3d ea 
84200626:	10 04       	Null = r0 - Null;
84200628:	03 62       	if NE jump (m) Lc_eft_buffer_details_3;

8420062a <Lc_eft_buffer_details_2>:
    {
        return FALSE;
8420062a:	02 00       	r0 = Null + Null;
8420062c:	1b 6e       	jump (m) Lc_eft_buffer_details_9;

8420062e <Lc_eft_buffer_details_3>:
    }

    /* Response pointer */
    p_resp = (OP_BUF_DETAILS_RSP*) *resp_data;
8420062e:	91 f0 00 e8 	rMAC = M[r7 + Null];
    p_resp->runs_in_place = FALSE;
    p_resp->b.buffer_size = EFT_DEFAULT_BUFFER_SIZE;
#else

    /* Can't use invalid ID */
    if (terminal_num >= EFT_MAX_SINKS)
84200632:	b0 24       	Null = r4 - 2;
84200634:	05 64       	if NC jump (m) Lc_eft_buffer_details_5;

84200636 <Lc_eft_buffer_details_4>:
84200636:	02 f0 03 60 	r0 = Null + 4099;
8420063a:	4a 8e       	M[rMAC + 4] = r0;
8420063c:	12 6e       	jump (m) Lc_eft_buffer_details_8;

8420063e <Lc_eft_buffer_details_5>:
                    terminal_num);
        base_op_change_response_status(resp_data, STATUS_INVALID_CMD_PARAMS);
        return TRUE;
    }
    /* Operator does not run in place */
    p_resp->runs_in_place = FALSE;
8420063e:	0a 92       	r0 = MBU[rMAC + 8];
84200640:	22 ff f7 1f 	r0 = r0 AND 0xfffffff7;
    p_resp->b.buffer_size = EFT_DEFAULT_BUFFER_SIZE;
84200644:	03 f0 80 40 	r1 = Null + 128;
84200648:	0b 8f       	M[rMAC + 16] = r1;
    p_resp->supports_metadata = TRUE;
8420064a:	22 ff ef 1f 	r0 = r0 AND 0xffffffef;
8420064e:	d2 c9       	r0 = r0 OR 0x10;
84200650:	0a 9a       	MB[rMAC + 8] = r0;

    if (terminal_num == EFT_PLAYBACK_TERMINAL_ID)
84200652:	30 04       	Null = r4 - Null;
84200654:	04 62       	if NE jump (m) Lc_eft_buffer_details_7;

84200656 <Lc_eft_buffer_details_6>:
    {
        p_resp->metadata_buffer = p_ext_data->metadata_ip[EFT_METADATA_PLAYBACK_ID];
84200656:	ba 88       	r0 = M[r5 + 8];
84200658:	ca 8e       	M[rMAC + 12] = r0;
8420065a:	03 6e       	jump (m) Lc_eft_buffer_details_8;

8420065c <Lc_eft_buffer_details_7>:
    }
    else
    {
        p_resp->metadata_buffer = p_ext_data->metadata_ip[EFT_METADATA_INT_ID];
8420065c:	fa 88       	r0 = M[r5 + 12];
8420065e:	ca 8e       	M[rMAC + 12] = r0;

84200660 <Lc_eft_buffer_details_8>:
    {
        /* invalid terminal id */
        L4_DBG_MSG1("EFT buffer details failed: invalid terminal %d",
                    terminal_num);
        base_op_change_response_status(resp_data, STATUS_INVALID_CMD_PARAMS);
        return TRUE;
84200660:	42 20       	r0 = Null + 1;

84200662 <Lc_eft_buffer_details_9>:
    {
        p_resp->metadata_buffer = p_ext_data->metadata_ip[EFT_METADATA_INT_ID];
    }
#endif /* DISABLE_IN_PLACE */
    return TRUE;
}
84200662:	f6 48       	popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84200664:	d8 4c       	rts;

84200666 <$_eft_get_sched_info>:

bool eft_get_sched_info(OPERATOR_DATA *op_data, void *message_data,
                              unsigned *response_id, void **resp_data)
{
84200666:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84200668:	17 00       	r5 = r0 + Null;
8420066a:	2e 00       	r4 = r3 + Null;
    OP_SCHED_INFO_RSP* resp;

    resp = base_op_get_sched_info_ex(op_data, message_data, response_id);
8420066c:	ef fd fe ff 	call (m) 0x41c;
84200670:	31 ed 
    if (resp == NULL)
84200672:	10 04       	Null = r0 - Null;
84200674:	09 62       	if NE jump (m) Lc_eft_get_sched_info_3;

84200676 <Lc_eft_get_sched_info_2>:
    {
        return base_op_build_std_response_ex(op_data, STATUS_CMD_FAILED,
                                             resp_data);
84200676:	03 f0 00 60 	r1 = Null + 4096;
8420067a:	34 00       	r2 = r4 + Null;
8420067c:	3a 00       	r0 = r5 + Null;
8420067e:	ef fd ff ff 	call (m) 0x4bc;
84200682:	3f e1 
84200684:	05 6e       	jump (m) Lc_eft_get_sched_info_4;

84200686 <Lc_eft_get_sched_info_3>:
    }

    *resp_data = resp;
84200686:	32 ee       	M[r4 + Null] = r0;
    resp->block_size = EFT_DEFAULT_BLOCK_SIZE;
84200688:	01 30       	rMAC = Null + 32;
8420068a:	91 8e       	M[r0 + 8] = rMAC;

    return TRUE;
8420068c:	42 20       	r0 = Null + 1;

8420068e <Lc_eft_get_sched_info_4>:
}
8420068e:	f2 48       	popm <FP, r4, r5, rLink>;
84200690:	d8 4c       	rts;

84200692 <$_eft_opmsg_set_control>:
Opmsg handlers
*/
bool eft_opmsg_set_control(OPERATOR_DATA *op_data, void *message_data,
                                 unsigned *resp_length,
                                 OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200692:	f6 1d       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x10;
84200694:	12 09       	r8 = r0 + Null;
84200696:	19 09       	r7 = r1 + Null;
84200698:	27 00       	r5 = r2 + Null;
8420069a:	45 de       	M[FP + 32] = r3;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
8420069c:	ef fd ff ff 	call (m) 0x4e6;
842006a0:	2b e2 
842006a2:	16 00       	r4 = r0 + Null;
    EFT_OP_DATA *p_ext_data = get_instance_data(op_data);

    unsigned i;
    unsigned num_controls;

    OPMSG_RESULT_STATES result = OPMSG_RESULT_STATES_NORMAL_STATE;
842006a4:	03 09       	r9 = Null + Null;

    if(!cps_control_setup(message_data, resp_length, resp_data, &num_controls))
842006a6:	45 12       	r3 = FP + 36;
842006a8:	3b 00       	r1 = r5 + Null;
842006aa:	4a 08       	r0 = r7 + Null;
842006ac:	44 d8       	r2 = M[FP + 32];
842006ae:	ff fd 02 f0 	call (m) 0xab2;
842006b2:	25 e0 
842006b4:	10 04       	Null = r0 - Null;
842006b6:	03 62       	if NE jump (m) Lc_eft_opmsg_set_control_3;

842006b8 <Lc_eft_opmsg_set_control_2>:
842006b8:	02 00       	r0 = Null + Null;
842006ba:	51 6e       	jump (m) Lc_eft_opmsg_set_control_25;

842006bc <Lc_eft_opmsg_set_control_3>:
842006bc:	08 71       	r6 = Null + 1;
       return FALSE;
    }

    /* Iterate through the control messages looking for mode and gain override
     * messages */
    for (i=0; i<num_controls; i++)
842006be:	07 00       	r5 = Null + Null;
842006c0:	10 6e       	jump (m) Lc_eft_opmsg_set_control_10;

842006c2 <Lc_eft_opmsg_set_control_4>:
            {
                result = OPMSG_RESULT_STATES_INVALID_CONTROL_VALUE;
                break;
            }

            eft_initialize_events(op_data, p_ext_data);
842006c2:	33 00       	r1 = r4 + Null;
842006c4:	52 08       	r0 = r8 + Null;
842006c6:	02 f0 23 e9 	call (m) Lc_eft_initialize_events_1;

            /* Gain update logic */
            switch (ctrl_value)
842006ca:	51 d8       	rMAC = M[FP + 40];
842006cc:	24 60       	if EQ jump (m) Lc_eft_opmsg_set_control_16;

842006ce <Lc_eft_opmsg_set_control_5>:
842006ce:	48 24       	Null = rMAC - 1;
842006d0:	03 62       	if NE jump (m) Lc_eft_opmsg_set_control_7;

842006d2 <Lc_eft_opmsg_set_control_6>:
                    /* Set current mode to Standby */
                    p_ext_data->cur_mode = EARBUD_FIT_TEST_SYSMODE_STANDBY;
                    break;
                case EARBUD_FIT_TEST_SYSMODE_FULL:
                    /* Set current mode to Full */
                    p_ext_data->cur_mode = EARBUD_FIT_TEST_SYSMODE_FULL;
842006d2:	68 f0 0c 8e 	M[r4 + 48] = r6;

842006d6 <Lc_eft_opmsg_set_control_7>:
                    /* Handled by early exit above */
                    break;
            }

            /* Determine control mode source and set override flags for mode */
            if (ctrl_src == CPS_SOURCE_HOST)
842006d6:	61 d1       	rMAC = MBS[FP + 44];
842006d8:	20 62       	if NE jump (m) Lc_eft_opmsg_set_control_17;

842006da <Lc_eft_opmsg_set_control_8>:
            {
                p_ext_data->host_mode = ctrl_value;
842006da:	51 d8       	rMAC = M[FP + 40];
842006dc:	b1 9f       	M[r4 + 56] = rMAC;

842006de <Lc_eft_opmsg_set_control_9>:
       return FALSE;
    }

    /* Iterate through the control messages looking for mode and gain override
     * messages */
    for (i=0; i<num_controls; i++)
842006de:	7f 20       	r5 = r5 + 1;

842006e0 <Lc_eft_opmsg_set_control_10>:
842006e0:	49 d8       	rMAC = M[FP + 36];
842006e2:	78 04       	Null = r5 - rMAC;
842006e4:	02 f0 a3 e0 	if C jump (m) Lc_eft_opmsg_set_control_14;

842006e8 <Lc_eft_opmsg_set_control_11>:
    {
        unsigned ctrl_value, ctrl_id;
        CPS_CONTROL_SOURCE  ctrl_src;

        ctrl_id = cps_control_get(message_data, i, &ctrl_value, &ctrl_src);
842006e8:	c5 12       	r3 = FP + 44;
842006ea:	84 12       	r2 = FP + 40;
842006ec:	3b 00       	r1 = r5 + Null;
842006ee:	4a 08       	r0 = r7 + Null;
842006f0:	ff fd 02 f0 	call (m) 0xb00;
842006f4:	31 e0 

        /* Mode override */
        if (ctrl_id == OPMSG_CONTROL_MODE_ID)
842006f6:	50 24       	Null = r0 - 1;
842006f8:	20 62       	if NE jump (m) Lc_eft_opmsg_set_control_20;

842006fa <Lc_eft_opmsg_set_control_12>:
        {
            /* Check for valid mode */
            ctrl_value &= EFT_SYSMODE_MASK;
842006fa:	51 d8       	rMAC = M[FP + 40];
842006fc:	89 c0       	rMAC = rMAC AND 0x3;
842006fe:	51 de       	M[FP + 40] = rMAC;
            if (ctrl_value >= EARBUD_FIT_TEST_SYSMODE_MAX_MODES)
84200700:	88 24       	Null = rMAC - 2;
84200702:	e0 65       	if NC jump (m) Lc_eft_opmsg_set_control_4;

84200704 <Lc_eft_opmsg_set_control_13>:
            {
                result = OPMSG_RESULT_STATES_INVALID_CONTROL_VALUE;
84200704:	2b 71       	r9 = Null + 5;

84200706 <Lc_eft_opmsg_set_control_14>:
            break;
        }
    }

    /* Set current operating mode based on override */
    if ((p_ext_data->ovr_control & EARBUD_FIT_TEST_CONTROL_MODE_OVERRIDE) != 0)
84200706:	71 99       	rMAC = M[r4 + 52];
84200708:	11 f1 00 00 	rMAC = rMAC AND 0x2000;
8420070c:	20 60       	if EQ jump (m) Lc_eft_opmsg_set_control_23;

8420070e <Lc_eft_opmsg_set_control_15>:
    {
        p_ext_data->cur_mode = p_ext_data->qact_mode;
8420070e:	f1 99       	rMAC = M[r4 + 60];
84200710:	31 9f       	M[r4 + 48] = rMAC;
84200712:	1f 6e       	jump (m) Lc_eft_opmsg_set_control_24;

84200714 <Lc_eft_opmsg_set_control_16>:
            /* Gain update logic */
            switch (ctrl_value)
            {
                case EARBUD_FIT_TEST_SYSMODE_STANDBY:
                    /* Set current mode to Standby */
                    p_ext_data->cur_mode = EARBUD_FIT_TEST_SYSMODE_STANDBY;
84200714:	30 9f       	M[r4 + 48] = Null;
                    break;
84200716:	e0 6f       	jump (m) Lc_eft_opmsg_set_control_7;

84200718 <Lc_eft_opmsg_set_control_17>:
            {
                p_ext_data->host_mode = ctrl_value;
            }
            else
            {
                p_ext_data->qact_mode = ctrl_value;
84200718:	51 d8       	rMAC = M[FP + 40];
8420071a:	f1 9f       	M[r4 + 60] = rMAC;
                /* Set or clear the QACT override flag.
                * &= is used to preserve the state of the
                * override word.
                */
                if (ctrl_src == CPS_SOURCE_OBPM_ENABLE)
8420071c:	61 d1       	rMAC = MBS[FP + 44];
8420071e:	88 24       	Null = rMAC - 2;
84200720:	07 62       	if NE jump (m) Lc_eft_opmsg_set_control_19;

84200722 <Lc_eft_opmsg_set_control_18>:
                {
                    p_ext_data->ovr_control |= EARBUD_FIT_TEST_CONTROL_MODE_OVERRIDE;
84200722:	71 99       	rMAC = M[r4 + 52];
84200724:	20 f0 00 f1 	rMAC = rMAC OR 0x2000;
84200728:	51 d8 
8420072a:	71 9f       	M[r4 + 52] = rMAC;
8420072c:	d9 6f       	jump (m) Lc_eft_opmsg_set_control_9;

8420072e <Lc_eft_opmsg_set_control_19>:
                }
                else
                {
                    p_ext_data->ovr_control &= EFT_OVERRIDE_MODE_MASK;
8420072e:	71 99       	rMAC = M[r4 + 52];
84200730:	11 f6 ff 1f 	rMAC = rMAC AND 0xdfff;
84200734:	71 9f       	M[r4 + 52] = rMAC;
84200736:	d4 6f       	jump (m) Lc_eft_opmsg_set_control_9;

84200738 <Lc_eft_opmsg_set_control_20>:
                }
            }

        }
        /* In/Out of Ear control */
        else if (ctrl_id == EARBUD_FIT_TEST_CONSTANT_IN_OUT_EAR_CTRL)
84200738:	d0 24       	Null = r0 - 3;
8420073a:	07 62       	if NE jump (m) Lc_eft_opmsg_set_control_22;

8420073c <Lc_eft_opmsg_set_control_21>:
        {
            ctrl_value &= 0x01;
8420073c:	51 d8       	rMAC = M[FP + 40];
8420073e:	09 c0       	rMAC = rMAC AND 0x1;
84200740:	51 de       	M[FP + 40] = rMAC;
            p_ext_data->in_out_status = ctrl_value;
84200742:	61 f0 40 8a 	MB[r4 + 64] = rMAC;
84200746:	cc 6f       	jump (m) Lc_eft_opmsg_set_control_9;

84200748 <Lc_eft_opmsg_set_control_22>:

        }
        else
        {
            result = OPMSG_RESULT_STATES_UNSUPPORTED_CONTROL;
84200748:	23 71       	r9 = Null + 4;
            break;
8420074a:	de 6f       	jump (m) Lc_eft_opmsg_set_control_14;

8420074c <Lc_eft_opmsg_set_control_23>:
    {
        p_ext_data->cur_mode = p_ext_data->qact_mode;
    }
    else
    {
        p_ext_data->cur_mode = p_ext_data->host_mode;
8420074c:	b1 99       	rMAC = M[r4 + 56];
8420074e:	31 9f       	M[r4 + 48] = rMAC;

84200750 <Lc_eft_opmsg_set_control_24>:
    }

    cps_response_set_result(resp_data, result);
84200750:	5b 08       	r1 = r9 + Null;
84200752:	42 d8       	r0 = M[FP + 32];
84200754:	ff fd 01 f0 	call (m) 0xb4e;
84200758:	3b ef 

    return TRUE;
8420075a:	42 08       	r0 = r6 + Null;

8420075c <Lc_eft_opmsg_set_control_25>:
}
8420075c:	f6 49       	SP = SP - 0x10, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
8420075e:	d8 4c       	rts;

84200760 <$_eft_opmsg_get_params>:

bool eft_opmsg_get_params(OPERATOR_DATA *op_data, void *message_data,
                                unsigned *resp_length,
                                OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200760:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84200762:	1f 00       	r5 = r1 + Null;
84200764:	26 00       	r4 = r2 + Null;
84200766:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
84200768:	ef fd fe ff 	call (m) 0x4e6;
8420076c:	3f eb 
                                unsigned *resp_length,
                                OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    EFT_OP_DATA *p_ext_data = get_instance_data(op_data);
    return cpsGetParameterMsgHandler(&p_ext_data->params_def, message_data,
                                     resp_length, resp_data);
8420076e:	02 f0 44 44 	r0 = r0 + 68;
84200772:	45 08       	r3 = r6 + Null;
84200774:	34 00       	r2 = r4 + Null;
84200776:	3b 00       	r1 = r5 + Null;
84200778:	ff fd 00 f0 	call (m) 0x792;
8420077c:	3b e0 

8420077e <Lc_eft_opmsg_get_params_2>:
}
8420077e:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200780:	d8 4c       	rts;

84200782 <$_eft_opmsg_get_defaults>:

bool eft_opmsg_get_defaults(OPERATOR_DATA *op_data, void *message_data,
                                  unsigned *resp_length,
                                  OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200782:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84200784:	1f 00       	r5 = r1 + Null;
84200786:	26 00       	r4 = r2 + Null;
84200788:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
8420078a:	ef fd fe ff 	call (m) 0x4e6;
8420078e:	3d ea 
                                  unsigned *resp_length,
                                  OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    EFT_OP_DATA *p_ext_data = get_instance_data(op_data);
    return cpsGetDefaultsMsgHandler(&p_ext_data->params_def, message_data,
                                    resp_length, resp_data);
84200790:	02 f0 44 44 	r0 = r0 + 68;
84200794:	45 08       	r3 = r6 + Null;
84200796:	34 00       	r2 = r4 + Null;
84200798:	3b 00       	r1 = r5 + Null;
8420079a:	ff fd 00 f0 	call (m) 0x840;
8420079e:	27 e5 

842007a0 <Lc_eft_opmsg_get_defaults_2>:
}
842007a0:	f3 48       	popm <FP, r4, r5, r6, rLink>;
842007a2:	d8 4c       	rts;

842007a4 <$_eft_opmsg_set_params>:

bool eft_opmsg_set_params(OPERATOR_DATA *op_data, void *message_data,
                                unsigned *resp_length,
                                OP_OPMSG_RSP_PAYLOAD **resp_data)
{
842007a4:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
842007a6:	19 09       	r7 = r1 + Null;
842007a8:	27 00       	r5 = r2 + Null;
842007aa:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
842007ac:	ef fd fe ff 	call (m) 0x4e6;
842007b0:	3b e9 
842007b2:	16 00       	r4 = r0 + Null;
    EFT_OP_DATA *p_ext_data = get_instance_data(op_data);
    bool success;
    /* patch_fn TODO */

    success = cpsSetParameterMsgHandler(&p_ext_data->params_def, message_data,
                                       resp_length, resp_data);
842007b4:	62 f0 44 20 	r0 = r4 + 68;
842007b8:	45 08       	r3 = r6 + Null;
842007ba:	3c 00       	r2 = r5 + Null;
842007bc:	4b 08       	r1 = r7 + Null;
842007be:	ff fd 00 f0 	call (m) 0x914;
842007c2:	37 ea 
842007c4:	17 00       	r5 = r0 + Null;

    if (success)
842007c6:	05 60       	if EQ jump (m) Lc_eft_opmsg_set_params_3;

842007c8 <Lc_eft_opmsg_set_params_2>:
    {
        /* Set re-initialization flag for capability */
        p_ext_data->re_init_flag = TRUE;
842007c8:	41 20       	rMAC = Null + 1;
842007ca:	61 f0 43 8a 	MB[r4 + 67] = rMAC;
842007ce:	0b 6e       	jump (m) Lc_eft_opmsg_set_params_5;

842007d0 <Lc_eft_opmsg_set_params_3>:
    }
    else
    {
        L2_DBG_MSG("EFT Set Parameters Failed");
842007d0:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842007d4:	88 24       	Null = rMAC - 2;
842007d6:	07 68       	if LT jump (m) Lc_eft_opmsg_set_params_5;

842007d8 <Lc_eft_opmsg_set_params_4>:
842007d8:	55 f1 02 f0 	r0 = Null + 357564804;
842007dc:	84 41 
842007de:	ff fd 02 f0 	call (m) 0xccc;
842007e2:	2f e7 

842007e4 <Lc_eft_opmsg_set_params_5>:
    }

    return success;
842007e4:	3a 00       	r0 = r5 + Null;

842007e6 <Lc_eft_opmsg_set_params_6>:
}
842007e6:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
842007e8:	d8 4c       	rts;

842007ea <$_eft_opmsg_get_status>:

bool eft_opmsg_get_status(OPERATOR_DATA *op_data, void *message_data,
                                unsigned *resp_length,
                                OP_OPMSG_RSP_PAYLOAD **resp_data)
{
842007ea:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
842007ec:	4c 4c       	SP = SP + 48;
842007ee:	19 09       	r7 = r1 + Null;
842007f0:	27 00       	r5 = r2 + Null;
842007f2:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
842007f4:	ef fd fe ff 	call (m) 0x4e6;
842007f8:	33 e7 
842007fa:	16 00       	r4 = r0 + Null;
    EFT_OP_DATA *p_ext_data = get_instance_data(op_data);
    /* TODO: patch functions */
    int i;

    /* Build the response */
    unsigned *resp = NULL;
842007fc:	30 de       	M[FP + 24] = Null;
    if(!common_obpm_status_helper(message_data, resp_length, resp_data,
                                  sizeof(EARBUD_FIT_TEST_STATISTICS), &resp))
842007fe:	81 11       	rMAC = FP + 24;
84200800:	09 1c       	pushm <rMAC>;
84200802:	05 31       	r3 = Null + 36;
84200804:	44 08       	r2 = r6 + Null;
84200806:	3b 00       	r1 = r5 + Null;
84200808:	4a 08       	r0 = r7 + Null;
8420080a:	ff fd 01 f0 	call (m) 0xb64;
8420080e:	3b ea 
84200810:	7f 4c       	SP = SP + -4;
84200812:	10 04       	Null = r0 - Null;
84200814:	03 62       	if NE jump (m) Lc_eft_opmsg_get_status_3;

84200816 <Lc_eft_opmsg_get_status_2>:
    {
         return FALSE;
84200816:	02 00       	r0 = Null + Null;
84200818:	34 6e       	jump (m) Lc_eft_opmsg_get_status_8;

8420081a <Lc_eft_opmsg_get_status_3>:
    }

    if (resp)
8420081a:	31 d8       	rMAC = M[FP + 24];
8420081c:	31 60       	if EQ jump (m) Lc_eft_opmsg_get_status_7;

8420081e <Lc_eft_opmsg_get_status_4>:
    {
        EARBUD_FIT_TEST_STATISTICS stats;
        EARBUD_FIT_TEST_STATISTICS *pstats = &stats;
        ParamType *pparam = (ParamType*)pstats;

        pstats->OFFSET_CUR_MODE         = p_ext_data->cur_mode;
8420081e:	31 99       	rMAC = M[r4 + 48];
84200820:	39 de       	M[FP + 28] = rMAC;
        pstats->OFFSET_OVR_CONTROL      = p_ext_data->ovr_control;
84200822:	71 99       	rMAC = M[r4 + 52];
84200824:	41 de       	M[FP + 32] = rMAC;
        pstats->OFFSET_IN_OUT_EAR_CTRL  = p_ext_data->in_out_status;
84200826:	61 f0 40 82 	rMAC = MBU[r4 + 64];
8420082a:	49 de       	M[FP + 36] = rMAC;

        pstats->OFFSET_FIT_QUALITY_FLAG = p_ext_data->fit_quality;
8420082c:	61 f0 41 82 	rMAC = MBU[r4 + 65];
84200830:	51 de       	M[FP + 40] = rMAC;

        pstats->OFFSET_FIT_EVENT        = p_ext_data->fit_event_detect.running;
84200832:	61 f0 60 80 	rMAC = MBS[r4 + 96];
84200836:	59 de       	M[FP + 44] = rMAC;
        pstats->OFFSET_FIT_TIMER        = (p_ext_data->fit_event_detect.frame_counter
                                           << EFT_TIMER_PARAM_SHIFT)/EFT_FRAME_RATE;
84200838:	b2 a9       	r0 = M[r4 + 88];
8420083a:	03 f0 fa 40 	r1 = Null + 250;
8420083e:	d2 56       	r0 = r0 LSHIFT 20;
84200840:	ff fd cd f0 	call (m) 0x1a290;
84200844:	31 e2 
84200846:	62 de       	M[FP + 48] = r0;
        pstats->OFFSET_POWER_REF        = p_ext_data->p_fit->pwr_reference;
84200848:	f1 b8       	rMAC = M[r4 + 108];
8420084a:	49 89       	rMAC = M[rMAC + 20];
8420084c:	69 de       	M[FP + 52] = rMAC;
        pstats->OFFSET_POWER_INT_MIC    = p_ext_data->p_fit->pwr_internal;
8420084e:	f1 b8       	rMAC = M[r4 + 108];
84200850:	09 89       	rMAC = M[rMAC + 16];
84200852:	71 de       	M[FP + 56] = rMAC;
        pstats->OFFSET_POWER_RATIO      = p_ext_data->p_fit->pwr_ratio;
84200854:	f1 b8       	rMAC = M[r4 + 108];
84200856:	89 89       	rMAC = M[rMAC + 24];
84200858:	79 de       	M[FP + 60] = rMAC;

        for (i=0; i<EFT_N_STAT/2; i++)
8420085a:	06 00       	r4 = Null + Null;
8420085c:	c7 11       	r5 = FP + 28;

8420085e <Lc_eft_opmsg_get_status_5>:
        {
            resp = cpsPack2Words(pparam[2*i], pparam[2*i+1], resp);
8420085e:	34 d8       	r2 = M[FP + 24];
84200860:	7b 88       	r1 = M[r5 + 4];
84200862:	3a e8       	r0 = M[r5 + Null];
84200864:	ff fd ca f1 	call (m) 0x39caa;
84200868:	27 e2 
8420086a:	32 de       	M[FP + 24] = r0;
                                           << EFT_TIMER_PARAM_SHIFT)/EFT_FRAME_RATE;
        pstats->OFFSET_POWER_REF        = p_ext_data->p_fit->pwr_reference;
        pstats->OFFSET_POWER_INT_MIC    = p_ext_data->p_fit->pwr_internal;
        pstats->OFFSET_POWER_RATIO      = p_ext_data->p_fit->pwr_ratio;

        for (i=0; i<EFT_N_STAT/2; i++)
8420086c:	76 20       	r4 = r4 + 1;
8420086e:	3f 22       	r5 = r5 + 8;
84200870:	30 25       	Null = r4 - 4;
84200872:	f6 69       	if LT jump (m) Lc_eft_opmsg_get_status_5;

84200874 <Lc_eft_opmsg_get_status_6>:
        {
            resp = cpsPack2Words(pparam[2*i], pparam[2*i+1], resp);
        }
        if ((EFT_N_STAT % 2) == 1) // last one
        {
            cpsPack1Word(pparam[EFT_N_STAT-1], resp);
84200874:	33 d8       	r1 = M[FP + 24];
84200876:	7a d8       	r0 = M[FP + 60];
84200878:	ff fd ca f1 	call (m) 0x39cda;
8420087c:	23 e3 

8420087e <Lc_eft_opmsg_get_status_7>:
        }
    }

    return TRUE;
8420087e:	42 20       	r0 = Null + 1;

84200880 <Lc_eft_opmsg_get_status_8>:
}
84200880:	74 4c       	SP = SP + -48;
84200882:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
84200884:	d8 4c       	rts;

84200886 <$_eft_opmsg_set_ucid>:
}

bool eft_opmsg_set_ucid(OPERATOR_DATA *op_data, void *message_data,
                              unsigned *resp_length,
                              OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200886:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84200888:	12 09       	r8 = r0 + Null;
8420088a:	19 09       	r7 = r1 + Null;
8420088c:	27 00       	r5 = r2 + Null;
8420088e:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
84200890:	ef fd fe ff 	call (m) 0x4e6;
84200894:	37 e2 
84200896:	16 00       	r4 = r0 + Null;
    EFT_OP_DATA *p_ext_data = get_instance_data(op_data);
    PS_KEY_TYPE key;
    bool retval;

    retval = cpsSetUcidMsgHandler(&p_ext_data->params_def, message_data,
                                  resp_length, resp_data);
84200898:	62 f0 44 20 	r0 = r4 + 68;
8420089c:	45 08       	r3 = r6 + Null;
8420089e:	3c 00       	r2 = r5 + Null;
842008a0:	4b 08       	r1 = r7 + Null;
842008a2:	ff fd 00 f0 	call (m) 0x9a6;
842008a6:	25 e8 
842008a8:	17 00       	r5 = r0 + Null;
    L5_DBG_MSG1("EFT cpsSetUcidMsgHandler Return Value %u", retval);
    key = MAP_CAPID_UCID_SBID_TO_PSKEYID(p_ext_data->cap_id,
                                         p_ext_data->params_def.ucid,
                                         OPMSG_P_STORE_PARAMETER_SUB_ID);
842008aa:	f1 89       	rMAC = M[r4 + 28];
842008ac:	8a c6       	r0 = rMAC AND 0xffff;
842008ae:	92 55       	r0 = r0 LSHIFT 7;
842008b0:	71 a9       	rMAC = M[r4 + 84];
842008b2:	8b c2       	r1 = rMAC AND 0x3f;
842008b4:	1b 54       	r1 = r1 LSHIFT 1;
842008b6:	9b 12       	r1 = r1 OR r0;

    ps_entry_read((void*)op_data, key, PERSIST_ANY, ups_params_eft);
842008b8:	42 f0 05 f0 	r3 = Null + 69208857;
842008bc:	19 53 
842008be:	04 00       	r2 = Null + Null;
842008c0:	52 08       	r0 = r8 + Null;
842008c2:	ff fd 37 f0 	call (m) 0x7888;
842008c6:	27 ee 

    L5_DBG_MSG1("EFT UCID Set to %u", p_ext_data->params_def.ucid);

    p_ext_data->re_init_flag = TRUE;
842008c8:	41 20       	rMAC = Null + 1;
842008ca:	61 f0 43 8a 	MB[r4 + 67] = rMAC;

    return retval;
842008ce:	3a 00       	r0 = r5 + Null;

842008d0 <Lc_eft_opmsg_set_ucid_2>:
}
842008d0:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
842008d2:	d8 4c       	rts;

842008d4 <$_eft_opmsg_get_ps_id>:

bool eft_opmsg_get_ps_id(OPERATOR_DATA *op_data, void *message_data,
                               unsigned *resp_length,
                               OP_OPMSG_RSP_PAYLOAD **resp_data)
{
842008d4:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
842008d6:	1f 00       	r5 = r1 + Null;
842008d8:	26 00       	r4 = r2 + Null;
842008da:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
842008dc:	ef fd fe ff 	call (m) 0x4e6;
842008e0:	2b e0 
    EFT_OP_DATA *p_ext_data = get_instance_data(op_data);
    return cpsGetUcidMsgHandler(&p_ext_data->params_def,
                                p_ext_data->cap_id,
                                message_data,
                                resp_length,
                                resp_data);
842008e2:	10 1c       	pushm <r6>;
842008e4:	d3 89       	r1 = M[r0 + 28];
842008e6:	35 00       	r3 = r4 + Null;
842008e8:	02 f0 44 44 	r0 = r0 + 68;
842008ec:	3c 00       	r2 = r5 + Null;
842008ee:	ff fd 00 f0 	call (m) 0x9c8;
842008f2:	3b e6 
842008f4:	7f 4c       	SP = SP + -4;

842008f6 <Lc_eft_opmsg_get_ps_id_2>:
}
842008f6:	f3 48       	popm <FP, r4, r5, r6, rLink>;
842008f8:	d8 4c       	rts;

842008fa <$_eft_process_data>:

/****************************************************************************
Data processing function
*/
void eft_process_data(OPERATOR_DATA *op_data, TOUCHED_TERMINALS *touched)
{
842008fa:	f6 1d       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x10;
842008fc:	13 09       	r9 = r0 + Null;
842008fe:	43 de       	M[FP + 32] = r1;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
84200900:	ef fd fd ff 	call (m) 0x4e6;
84200904:	27 ef 
84200906:	11 09       	r7 = r0 + Null;
     * Early exit testing
     *********************/

    /* Without adequate data we can just return */
    samples_to_process = INT_MAX;
    samples_to_process = eft_calc_samples_to_process(p_ext_data);
84200908:	01 f0 39 e1 	call (m) Lc_eft_calc_samples_to_process_1;

    /* Return early if playback and int mic input terminals are not connected */
    if (samples_to_process == INT_MAX)
8420090c:	1f f0 ff ff 	Null = r0 - 2147483647;
84200910:	20 f3 ff 3f 
84200914:	00 f0 81 e4 	if EQ jump (m) Lc_eft_process_data_24;

84200918 <Lc_eft_process_data_2>:
        L5_DBG_MSG("Minimum number of ports (ref and int mic) not connected");
        return;
    }

     /* Return early if not enough data to process */
    if (samples_to_process < EFT_DEFAULT_FRAME_SIZE)
84200918:	20 f0 40 24 	Null = r0 - 64;
8420091c:	fc 68       	if LT jump (m) Lc_eft_process_data_24;

8420091e <Lc_eft_process_data_3>:

    /* Other conditions that are invalid for running EFT need to discard
     * input data if it exists.
     */

    exit_early = FALSE;
8420091e:	01 00       	rMAC = Null + Null;
    /* Don't do any processing in standby */
    if (p_ext_data->cur_mode == EARBUD_FIT_TEST_SYSMODE_STANDBY)
84200920:	90 f0 0c 88 	Null = M[r7 + 48];
84200924:	02 62       	if NE jump (m) Lc_eft_process_data_5;

84200926 <Lc_eft_process_data_4>:
    {
        exit_early = TRUE;
84200926:	41 20       	rMAC = Null + 1;

84200928 <Lc_eft_process_data_5>:
    }

    if (p_ext_data->in_out_status != EFT_IN_EAR)
84200928:	92 f0 40 82 	r0 = MBU[r7 + 64];
8420092c:	50 24       	Null = r0 - 1;
8420092e:	31 60       	if EQ jump (m) Lc_eft_process_data_16;

84200930 <Lc_eft_process_data_6>:
    {
        exit_early = TRUE;
    }

    sample_count = 0;
84200930:	02 09       	r8 = Null + Null;

84200932 <Lc_eft_process_data_7>:
    if (exit_early)
    {
        discard_data = TRUE;
84200932:	08 71       	r6 = Null + 1;

84200934 <Lc_eft_process_data_8>:

        /* There is at least 1 frame to process */
        do {
            sample_count += EFT_DEFAULT_FRAME_SIZE;
84200934:	0a f0 40 44 	r8 = r8 + 64;
            /* Iterate through all sinks */
            for (i = 0; i < EFT_MAX_SINKS; i++)
84200938:	06 00       	r4 = Null + Null;
8420093a:	4f 08       	r5 = r7 + Null;

8420093c <Lc_eft_process_data_9>:
            {
                if (p_ext_data->inputs[i] != NULL)
8420093c:	3a e8       	r0 = M[r5 + Null];
8420093e:	0e 60       	if EQ jump (m) Lc_eft_process_data_12;

84200940 <Lc_eft_process_data_10>:
                {
                    /* Discard a frame of data */
                    cbuffer_discard_data(p_ext_data->inputs[i],
                                         EFT_DEFAULT_FRAME_SIZE);
84200940:	03 f0 40 40 	r1 = Null + 64;
84200944:	ff fd cb f1 	call (m) 0x39f54;
84200948:	31 e0 

                    /* If there isn't a frame worth of data left then don't
                     * iterate through the input terminals again.
                     */
                    samples_to_process = cbuffer_calc_amount_data_in_words(
                        p_ext_data->inputs[i]);
8420094a:	3a e8       	r0 = M[r5 + Null];
8420094c:	ff fd ca f1 	call (m) 0x39dd4;
84200950:	29 e4 

                    if (samples_to_process < EFT_DEFAULT_FRAME_SIZE)
84200952:	20 f0 40 24 	Null = r0 - 64;
84200956:	02 66       	if GE jump (m) Lc_eft_process_data_12;

84200958 <Lc_eft_process_data_11>:
                    {
                        discard_data = FALSE;
84200958:	00 09       	r6 = Null + Null;

8420095a <Lc_eft_process_data_12>:

        /* There is at least 1 frame to process */
        do {
            sample_count += EFT_DEFAULT_FRAME_SIZE;
            /* Iterate through all sinks */
            for (i = 0; i < EFT_MAX_SINKS; i++)
8420095a:	76 20       	r4 = r4 + 1;
8420095c:	3f 21       	r5 = r5 + 4;
8420095e:	b0 24       	Null = r4 - 2;
84200960:	ee 69       	if LT jump (m) Lc_eft_process_data_9;

84200962 <Lc_eft_process_data_13>:
84200962:	0f f8 00 c2 	Null = r6 - Null;
84200966:	e7 63       	if NE jump (m) Lc_eft_process_data_8;

84200968 <Lc_eft_process_data_14>:
84200968:	01 fa d8 c8 	r6 = r8 LSHIFT 2;
                    }
                }
            }
        } while (discard_data);

        for (i=0; i < EFT_NUM_METADATA_CHANNELS; i++)
8420096c:	07 00       	r5 = Null + Null;
8420096e:	96 f0 08 20 	r4 = r7 + 8;

84200972 <Lc_eft_process_data_15>:
        {
            /* Extract metadata tag from input */
            mtag_ip_list = buff_metadata_remove(p_ext_data->metadata_ip[i],
                            sample_count * OCTETS_PER_SAMPLE, &b4idx, &afteridx);
84200972:	85 12       	r3 = FP + 40;
84200974:	44 12       	r2 = FP + 36;
84200976:	32 e8       	r0 = M[r4 + Null];
84200978:	43 08       	r1 = r6 + Null;
8420097a:	ff fd a0 f0 	call (m) 0x149ca;
8420097e:	31 e2 

            /* Free all the incoming tags */
            buff_metadata_tag_list_delete(mtag_ip_list);
84200980:	ff fd 9e f0 	call (m) 0x145ee;
84200984:	2f e3 
                    }
                }
            }
        } while (discard_data);

        for (i=0; i < EFT_NUM_METADATA_CHANNELS; i++)
84200986:	7f 20       	r5 = r5 + 1;
84200988:	36 21       	r4 = r4 + 4;
8420098a:	b8 24       	Null = r5 - 2;
8420098c:	f3 69       	if LT jump (m) Lc_eft_process_data_15;

8420098e <Lc__ite_13>:
8420098e:	c3 6e       	jump (m) Lc_eft_process_data_24;

84200990 <Lc_eft_process_data_16>:
    if (p_ext_data->in_out_status != EFT_IN_EAR)
    {
        exit_early = TRUE;
    }

    sample_count = 0;
84200990:	02 09       	r8 = Null + Null;
    if (exit_early)
84200992:	08 04       	Null = rMAC - Null;
84200994:	cf 63       	if NE jump (m) Lc_eft_process_data_7;

84200996 <Lc_eft_process_data_17>:

        /* Exit early */
        return;
    }

    if (p_ext_data->re_init_flag == TRUE)
84200996:	91 f0 43 82 	rMAC = MBU[r7 + 67];
8420099a:	48 24       	Null = rMAC - 1;
8420099c:	32 62       	if NE jump (m) Lc_eft_process_data_19;

8420099e <Lc_eft_process_data_18>:
    {
        p_ext_data->re_init_flag = FALSE;
8420099e:	90 f0 43 8a 	MB[r7 + 67] = Null;

        /* Initialize events*/
        eft_initialize_events(op_data, p_ext_data);
842009a2:	4b 08       	r1 = r7 + Null;
842009a4:	5a 08       	r0 = r9 + Null;
842009a6:	01 f0 23 e2 	call (m) Lc_eft_initialize_events_1;

        /* Initialize afb and fit100 */
        aanc_afb_initialize(p_ext_data->f_handle,
                            p_ext_data->p_afb_ref);
842009aa:	93 f0 19 88 	r1 = M[r7 + 100];
842009ae:	92 f0 1c 88 	r0 = M[r7 + 112];
842009b2:	02 f0 37 e3 	call (m) $_aanc_afb_initialize;
        aanc_afb_initialize(p_ext_data->f_handle,
                            p_ext_data->p_afb_int);
842009b6:	93 f0 1a 88 	r1 = M[r7 + 104];
842009ba:	92 f0 1c 88 	r0 = M[r7 + 112];
842009be:	02 f0 2b e3 	call (m) $_aanc_afb_initialize;

        p_params = &p_ext_data->eft_cap_params;
842009c2:	91 f0 20 20 	rMAC = r7 + 32;
        p_ext_data->p_fit->bin_select = p_params->OFFSET_BIN_SELECT;
842009c6:	ca 88       	r0 = M[rMAC + 12];
842009c8:	93 f0 1b 88 	r1 = M[r7 + 108];
842009cc:	da 8f       	M[r1 + 28] = r0;
        p_ext_data->p_fit->power_smooth_time = p_params->OFFSET_POWER_SMOOTH_TIME;
842009ce:	0a e8       	r0 = M[rMAC + Null];
842009d0:	93 f0 1b 88 	r1 = M[r7 + 108];
842009d4:	1a ee       	M[r1 + Null] = r0;
        p_ext_data->p_fit->threshold = p_params->OFFSET_FIT_THRESHOLD;
842009d6:	49 88       	rMAC = M[rMAC + 4];
842009d8:	92 f0 1b 88 	r0 = M[r7 + 108];
842009dc:	51 8e       	M[r0 + 4] = rMAC;
        p_ext_data->p_fit->bexp_offset = 0;
842009de:	91 f0 1b 88 	rMAC = M[r7 + 108];
842009e2:	88 8e       	M[rMAC + 8] = Null;

        p_ext_data->fit_quality = 0;
842009e4:	90 f0 41 8a 	MB[r7 + 65] = Null;
        p_ext_data->prev_fit_quality = 0;
842009e8:	90 f0 42 8a 	MB[r7 + 66] = Null;

        aanc_fit100_initialize(p_ext_data->f_handle,
                               p_ext_data->p_fit,
                               p_ext_data->p_afb_int,
                               p_ext_data->p_afb_ref);
842009ec:	95 f0 19 88 	r3 = M[r7 + 100];
842009f0:	94 f0 1a 88 	r2 = M[r7 + 104];
842009f4:	93 f0 1b 88 	r1 = M[r7 + 108];
842009f8:	92 f0 1c 88 	r0 = M[r7 + 112];
842009fc:	02 f0 3b e6 	call (m) $_aanc_fit100_initialize;

84200a00 <Lc_eft_process_data_19>:
    }

    sample_count = 0;
84200a00:	00 09       	r6 = Null + Null;

84200a02 <Lc_eft_process_data_20>:
    {

        /* Copy input data to internal data buffers */
        cbuffer_copy(p_ext_data->p_tmp_ref_ip,
                     p_ext_data->inputs[EFT_PLAYBACK_TERMINAL_ID],
                     EFT_DEFAULT_FRAME_SIZE);
84200a02:	04 f0 40 40 	r2 = Null + 64;
84200a06:	93 f0 00 e8 	r1 = M[r7 + Null];
84200a0a:	92 f0 04 88 	r0 = M[r7 + 16];
84200a0e:	ff fd cb f1 	call (m) 0x3a08c;
84200a12:	3f e3 
        cbuffer_copy(p_ext_data->p_tmp_int_ip,
                     p_ext_data->inputs[EFT_MIC_INT_TERMINAL_ID],
                     EFT_DEFAULT_FRAME_SIZE);
84200a14:	04 f0 40 40 	r2 = Null + 64;
84200a18:	93 f0 01 88 	r1 = M[r7 + 4];
84200a1c:	92 f0 05 88 	r0 = M[r7 + 20];
84200a20:	ff fd cb f1 	call (m) 0x3a08c;
84200a24:	2d e3 

        t_fft_object *p_fft_ref = p_ext_data->p_afb_ref->afb.fft_object_ptr;
84200a26:	91 f0 19 88 	rMAC = M[r7 + 100];
84200a2a:	0e 89       	r4 = M[rMAC + 16];
        p_fft_ref->real_scratch_ptr = scratch_commit(
            AANC_FILTER_BANK_NUM_BINS*sizeof(int), MALLOC_PREFERENCE_DM1);
84200a2c:	43 20       	r1 = Null + 1;
84200a2e:	02 f0 04 41 	r0 = Null + 260;
84200a32:	ff fd 08 f0 	call (m) 0x1a62;
84200a36:	31 e1 
84200a38:	72 8e       	M[r4 + 4] = r0;
        p_fft_ref->imag_scratch_ptr = scratch_commit(
            AANC_FILTER_BANK_NUM_BINS*sizeof(int), MALLOC_PREFERENCE_DM2);
84200a3a:	83 20       	r1 = Null + 2;
84200a3c:	02 f0 04 41 	r0 = Null + 260;
84200a40:	ff fd 08 f0 	call (m) 0x1a62;
84200a44:	23 e1 
84200a46:	b2 8e       	M[r4 + 8] = r0;
        p_fft_ref->fft_scratch_ptr = scratch_commit(
            AANC_FILTER_BANK_NUM_BINS*sizeof(int), MALLOC_PREFERENCE_DM2);
84200a48:	83 20       	r1 = Null + 2;
84200a4a:	02 f0 04 41 	r0 = Null + 260;
84200a4e:	ff fd 08 f0 	call (m) 0x1a62;
84200a52:	35 e0 
84200a54:	f2 8e       	M[r4 + 12] = r0;

        /* AFB process on reference */
        aanc_afb_process_data(p_ext_data->f_handle, p_ext_data->p_afb_ref,
                              p_ext_data->p_tmp_ref_ip);
84200a56:	94 f0 04 88 	r2 = M[r7 + 16];
84200a5a:	93 f0 19 88 	r1 = M[r7 + 100];
84200a5e:	92 f0 1c 88 	r0 = M[r7 + 112];
84200a62:	02 f0 2d e0 	call (m) $_aanc_afb_process_data;

        /* Second AFB call re-uses scratch memory from the first */
        t_fft_object *p_fft_int = p_ext_data->p_afb_int->afb.fft_object_ptr;
84200a66:	91 f0 1a 88 	rMAC = M[r7 + 104];
84200a6a:	0f 89       	r5 = M[rMAC + 16];
        p_fft_int->real_scratch_ptr = p_fft_ref->real_scratch_ptr;
84200a6c:	71 88       	rMAC = M[r4 + 4];
84200a6e:	79 8e       	M[r5 + 4] = rMAC;
        p_fft_int->imag_scratch_ptr = p_fft_ref->imag_scratch_ptr;
84200a70:	b1 88       	rMAC = M[r4 + 8];
84200a72:	b9 8e       	M[r5 + 8] = rMAC;
        p_fft_int->fft_scratch_ptr = p_fft_ref->fft_scratch_ptr;
84200a74:	f1 88       	rMAC = M[r4 + 12];
84200a76:	f9 8e       	M[r5 + 12] = rMAC;

        /* AFB process on int mic */
        aanc_afb_process_data(p_ext_data->f_handle, p_ext_data->p_afb_int,
                              p_ext_data->p_tmp_int_ip);
84200a78:	94 f0 05 88 	r2 = M[r7 + 20];
84200a7c:	93 f0 1a 88 	r1 = M[r7 + 104];
84200a80:	92 f0 1c 88 	r0 = M[r7 + 112];
84200a84:	01 f0 2b ef 	call (m) $_aanc_afb_process_data;

        /* Set scratch pointers to NULL before freeing scratch */
        p_fft_ref->real_scratch_ptr = NULL;
84200a88:	70 8e       	M[r4 + 4] = Null;
        p_fft_ref->imag_scratch_ptr = NULL;
84200a8a:	b0 8e       	M[r4 + 8] = Null;
        p_fft_ref->fft_scratch_ptr = NULL;
84200a8c:	f0 8e       	M[r4 + 12] = Null;
        p_fft_int->real_scratch_ptr = NULL;
84200a8e:	78 8e       	M[r5 + 4] = Null;
        p_fft_int->imag_scratch_ptr = NULL;
84200a90:	b8 8e       	M[r5 + 8] = Null;
        p_fft_int->fft_scratch_ptr = NULL;
84200a92:	f8 8e       	M[r5 + 12] = Null;

        scratch_free();
84200a94:	ff fd 08 f0 	call (m) 0x1ac8;
84200a98:	35 e1 

        /* FIT100 processing */
        aanc_fit100_process_data(p_ext_data->f_handle, p_ext_data->p_fit);
84200a9a:	93 f0 1b 88 	r1 = M[r7 + 108];
84200a9e:	92 f0 1c 88 	r0 = M[r7 + 112];
84200aa2:	02 f0 3d e3 	call (m) $_aanc_fit100_process_data;

        p_ext_data->fit_quality = p_ext_data->p_fit->fit_flag;
84200aa6:	91 f0 1b 88 	rMAC = M[r7 + 108];
84200aaa:	c9 88       	rMAC = M[rMAC + 12];
84200aac:	91 f0 41 8a 	MB[r7 + 65] = rMAC;

        /* Process and send significant event, if any */
        eft_process_events(op_data, p_ext_data);
84200ab0:	4b 08       	r1 = r7 + Null;
84200ab2:	5a 08       	r0 = r9 + Null;
84200ab4:	a6 4e       	call (m) Lc_eft_process_events_1;

        /* Update prev fit flag after event processing */
        p_ext_data->prev_fit_quality = p_ext_data->fit_quality;
84200ab6:	91 f0 41 82 	rMAC = MBU[r7 + 65];
84200aba:	91 f0 42 8a 	MB[r7 + 66] = rMAC;

        cbuffer_discard_data(p_ext_data->p_tmp_ref_ip,
                                EFT_DEFAULT_FRAME_SIZE);
84200abe:	03 f0 40 40 	r1 = Null + 64;
84200ac2:	92 f0 04 88 	r0 = M[r7 + 16];
84200ac6:	ff fd ca f1 	call (m) 0x39f54;
84200aca:	2f e4 
        cbuffer_discard_data(p_ext_data->p_tmp_int_ip,
                                EFT_DEFAULT_FRAME_SIZE);
84200acc:	03 f0 40 40 	r1 = Null + 64;
84200ad0:	92 f0 05 88 	r0 = M[r7 + 20];
84200ad4:	ff fd ca f1 	call (m) 0x39f54;
84200ad8:	21 e4 

        samples_to_process = eft_calc_samples_to_process(p_ext_data);
84200ada:	4a 08       	r0 = r7 + Null;
84200adc:	32 4e       	call (m) Lc_eft_calc_samples_to_process_1;
        sample_count += EFT_DEFAULT_FRAME_SIZE;
84200ade:	08 f0 40 44 	r6 = r6 + 64;
                               p_ext_data->p_afb_int,
                               p_ext_data->p_afb_ref);
    }

    sample_count = 0;
    while (samples_to_process >= EFT_DEFAULT_FRAME_SIZE)
84200ae2:	20 f0 40 24 	Null = r0 - 64;
84200ae6:	8e 67       	if GE jump (m) Lc_eft_process_data_20;

84200ae8 <Lc_eft_process_data_21>:
84200ae8:	01 f8 d8 c8 	r6 = r6 LSHIFT 2;

        samples_to_process = eft_calc_samples_to_process(p_ext_data);
        sample_count += EFT_DEFAULT_FRAME_SIZE;
    }

    for (i=0; i < EFT_NUM_METADATA_CHANNELS; i++)
84200aec:	07 00       	r5 = Null + Null;
84200aee:	96 f0 08 20 	r4 = r7 + 8;

84200af2 <Lc_eft_process_data_22>:
    {
        /* Extract metadata tag from input */
        mtag_ip_list = buff_metadata_remove(p_ext_data->metadata_ip[i],
                        sample_count * OCTETS_PER_SAMPLE, &b4idx, &afteridx);
84200af2:	85 12       	r3 = FP + 40;
84200af4:	44 12       	r2 = FP + 36;
84200af6:	32 e8       	r0 = M[r4 + Null];
84200af8:	43 08       	r1 = r6 + Null;
84200afa:	ff fd 9f f0 	call (m) 0x149ca;
84200afe:	31 e6 

        /* Free all the incoming tags */
        buff_metadata_tag_list_delete(mtag_ip_list);
84200b00:	ff fd 9d f0 	call (m) 0x145ee;
84200b04:	2f e7 

        samples_to_process = eft_calc_samples_to_process(p_ext_data);
        sample_count += EFT_DEFAULT_FRAME_SIZE;
    }

    for (i=0; i < EFT_NUM_METADATA_CHANNELS; i++)
84200b06:	7f 20       	r5 = r5 + 1;
84200b08:	36 21       	r4 = r4 + 4;
84200b0a:	b8 24       	Null = r5 - 2;
84200b0c:	f3 69       	if LT jump (m) Lc_eft_process_data_22;

84200b0e <Lc_eft_process_data_23>:
        buff_metadata_tag_list_delete(mtag_ip_list);
    }
    /***************************
     * Update touched terminals
     ***************************/
    touched->sinks = (unsigned) EFT_MIN_VALID_SINKS;
84200b0e:	c1 20       	rMAC = Null + 3;
84200b10:	42 d8       	r0 = M[FP + 32];
84200b12:	51 8e       	M[r0 + 4] = rMAC;

84200b14 <Lc_eft_process_data_24>:

    L5_DBG_MSG("EFT process channel data completed");

    return;
}
84200b14:	f6 49       	SP = SP - 0x10, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84200b16:	d8 4c       	rts;

84200b18 <$_ups_params_eft>:

bool ups_params_eft(void* instance_data, PS_KEY_TYPE key,
                          PERSISTENCE_RANK rank, uint16 length,
                          unsigned* data, STATUS_KYMERA status,
                          uint16 extra_status_info)
{
84200b18:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84200b1a:	2f 00       	r5 = r3 + Null;
 *
 * \return  Pointer to extra operator data EFT_OP_DATA.
 */
static inline EFT_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (EFT_OP_DATA *) base_op_get_instance_data(op_data);
84200b1c:	ef fd fc ff 	call (m) 0x4e6;
84200b20:	2b ee 
84200b22:	16 00       	r4 = r0 + Null;
                          uint16 extra_status_info)
{
    OPERATOR_DATA *op_data = (OPERATOR_DATA*) instance_data;
    EFT_OP_DATA *p_ext_data = get_instance_data(op_data);

    cpsSetParameterFromPsStore(&p_ext_data->params_def, length, data, status);
84200b24:	e5 d5       	r3 = MHS[FP + -8];
84200b26:	fc d9       	r2 = M[FP + -4];
84200b28:	62 f0 44 20 	r0 = r4 + 68;
84200b2c:	3b 00       	r1 = r5 + Null;
84200b2e:	ef fd ff ff 	call (m) 0xa0a;
84200b32:	3d e6 

    /* Set the reinitialization flag after setting the parameters */
    p_ext_data->re_init_flag = TRUE;
84200b34:	41 20       	rMAC = Null + 1;
84200b36:	61 f0 43 8a 	MB[r4 + 67] = rMAC;

    return TRUE;
84200b3a:	0a 00       	r0 = rMAC + Null;

84200b3c <Lc_ups_params_eft_2>:
}
84200b3c:	f2 48       	popm <FP, r4, r5, rLink>;
84200b3e:	d8 4c       	rts;

84200b40 <Lc_eft_calc_samples_to_process_1>:
 * If there is less data or space than the default frame size then only that
 * number of samples will be returned.
 *
 */
static int eft_calc_samples_to_process(EFT_OP_DATA *p_ext_data)
{
84200b40:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
    int i, amt, min_data;

    /* Return if playback and int mic input terminals are not connected */
    if (p_ext_data->inputs[EFT_PLAYBACK_TERMINAL_ID] == NULL ||
        p_ext_data->inputs[EFT_MIC_INT_TERMINAL_ID] == NULL)
84200b42:	11 e8       	rMAC = M[r0 + Null];
84200b44:	03 60       	if EQ jump (m) Lc_eft_calc_samples_to_process_3;

84200b46 <Lc_eft_calc_samples_to_process_2>:
84200b46:	51 88       	rMAC = M[r0 + 4];
84200b48:	05 62       	if NE jump (m) Lc_eft_calc_samples_to_process_4;

84200b4a <Lc_eft_calc_samples_to_process_3>:
    {
        return INT_MAX;
84200b4a:	ff f7 f2 f7 	r0 = Null + 2147483647;
84200b4e:	ff 7b 
84200b50:	13 6e       	jump (m) Lc_eft_calc_samples_to_process_10;

84200b52 <Lc_eft_calc_samples_to_process_4>:
    }

    min_data = EFT_DEFAULT_FRAME_SIZE;
84200b52:	06 f0 40 40 	r4 = Null + 64;
    /* Calculate the amount of data available */
    for (i = EFT_PLAYBACK_TERMINAL_ID; i <= EFT_MIC_INT_TERMINAL_ID; i++)
84200b56:	07 00       	r5 = Null + Null;
84200b58:	10 09       	r6 = r0 + Null;

84200b5a <Lc_eft_calc_samples_to_process_5>:
    {
        if (p_ext_data->inputs[i] != NULL)
84200b5a:	82 f0 00 e8 	r0 = M[r6 + Null];
84200b5e:	07 60       	if EQ jump (m) Lc_eft_calc_samples_to_process_8;

84200b60 <Lc_eft_calc_samples_to_process_6>:
        {
            amt = cbuffer_calc_amount_data_in_words(p_ext_data->inputs[i]);
84200b60:	ff fd c9 f1 	call (m) 0x39dd4;
84200b64:	35 e3 
            if (amt < min_data)
84200b66:	90 05       	Null = r0 - r4;
84200b68:	02 66       	if GE jump (m) Lc_eft_calc_samples_to_process_8;

84200b6a <Lc_eft_calc_samples_to_process_7>:
            {
                min_data = amt;
84200b6a:	16 00       	r4 = r0 + Null;

84200b6c <Lc_eft_calc_samples_to_process_8>:
        return INT_MAX;
    }

    min_data = EFT_DEFAULT_FRAME_SIZE;
    /* Calculate the amount of data available */
    for (i = EFT_PLAYBACK_TERMINAL_ID; i <= EFT_MIC_INT_TERMINAL_ID; i++)
84200b6c:	7f 20       	r5 = r5 + 1;
84200b6e:	20 75       	r6 = r6 + 4;
84200b70:	78 24       	Null = r5 - 1;
84200b72:	f4 6d       	if LE jump (m) Lc_eft_calc_samples_to_process_5;

84200b74 <Lc_eft_calc_samples_to_process_9>:
            }
        }
    }

    /* Samples to process determined as minimum data available */
    return min_data;
84200b74:	32 00       	r0 = r4 + Null;

84200b76 <Lc_eft_calc_samples_to_process_10>:
}
84200b76:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200b78:	d8 4c       	rts;

84200b7a <Lc_eft_clear_event_1>:

static void eft_clear_event(EFT_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
84200b7a:	51 88       	rMAC = M[r0 + 4];
84200b7c:	11 ee       	M[r0 + Null] = rMAC;
       p_event->running = EFT_EVENT_CLEAR;
84200b7e:	10 9a       	MB[r0 + 8] = Null;

84200b80 <Lc_eft_clear_event_2>:
84200b80:	d8 4c       	rts;

84200b82 <Lc_eft_send_event_trigger_1>:
 *
 * \return  bool indicating success
 */
static bool eft_send_event_trigger(OPERATOR_DATA *op_data,
                                    uint16 id, uint16 payload)
{
84200b82:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
84200b84:	11 09       	r7 = r0 + Null;
84200b86:	1f 00       	r5 = r1 + Null;
84200b88:	20 09       	r6 = r2 + Null;
    unsigned msg_size;
    unsigned *trigger_message = NULL;

    msg_size = OPMSG_UNSOLICITED_EFT_EVENT_TRIGGER_WORD_SIZE;
    trigger_message = xpnewn(msg_size, unsigned);
84200b8a:	c3 20       	r1 = Null + 3;
84200b8c:	02 22       	r0 = Null + 8;
84200b8e:	ff fd 2e f0 	call (m) 0x67ac;
84200b92:	3f e0 
84200b94:	16 00       	r4 = r0 + Null;
    if (trigger_message == NULL)
84200b96:	0d 62       	if NE jump (m) Lc_eft_send_event_trigger_5;

84200b98 <Lc_eft_send_event_trigger_2>:
    {
        L2_DBG_MSG("Failed to send EFT event message");
84200b98:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200b9c:	88 24       	Null = rMAC - 2;
84200b9e:	07 68       	if LT jump (m) Lc_eft_send_event_trigger_4;

84200ba0 <Lc_eft_send_event_trigger_3>:
84200ba0:	55 f1 02 f0 	r0 = Null + 357564416;
84200ba4:	00 40 
84200ba6:	ff fd 00 f0 	call (m) 0xccc;
84200baa:	27 e9 

84200bac <Lc_eft_send_event_trigger_4>:
        return FALSE;
84200bac:	02 00       	r0 = Null + Null;
84200bae:	1b 6e       	jump (m) Lc_eft_send_event_trigger_8;

84200bb0 <Lc_eft_send_event_trigger_5>:
    }

    OPMSG_CREATION_FIELD_SET(trigger_message,
                             OPMSG_UNSOLICITED_EFT_EVENT_TRIGGER,
                             ID,
                             id);
84200bb0:	3b 00       	r1 = r5 + Null;
84200bb2:	33 ee       	M[r4 + Null] = r1;
    OPMSG_CREATION_FIELD_SET(trigger_message,
                             OPMSG_UNSOLICITED_EFT_EVENT_TRIGGER,
                             PAYLOAD,
                             payload);
84200bb4:	44 08       	r2 = r6 + Null;
84200bb6:	74 8e       	M[r4 + 4] = r2;

    L2_DBG_MSG2("EFT Event Sent: [%u, %u]", trigger_message[0],
                trigger_message[1]);
84200bb8:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200bbc:	88 24       	Null = rMAC - 2;
84200bbe:	07 68       	if LT jump (m) Lc_eft_send_event_trigger_7;

84200bc0 <Lc_eft_send_event_trigger_6>:
84200bc0:	55 f1 02 f0 	r0 = Null + 357564449;
84200bc4:	21 40 
84200bc6:	ff fd 00 f0 	call (m) 0xcf2;
84200bca:	2d e9 

84200bcc <Lc_eft_send_event_trigger_7>:
    common_send_unsolicited_message(op_data,
                                    (unsigned)OPMSG_REPLY_ID_EFT_EVENT_TRIGGER,
                                    msg_size,
                                    trigger_message);
84200bcc:	84 20       	r2 = Null + 2;
84200bce:	c3 22       	r1 = Null + 11;
84200bd0:	35 00       	r3 = r4 + Null;
84200bd2:	4a 08       	r0 = r7 + Null;
84200bd4:	ef fd fc ff 	call (m) 0x592;
84200bd8:	3f ed 

    pdelete(trigger_message);
84200bda:	32 00       	r0 = r4 + Null;
84200bdc:	ff fd 2e f0 	call (m) 0x68d8;
84200be0:	3d e7 

    return TRUE;
84200be2:	42 20       	r0 = Null + 1;

84200be4 <Lc_eft_send_event_trigger_8>:
}
84200be4:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
84200be6:	d8 4c       	rts;

84200be8 <Lc_eft_initialize_events_1>:
 * \param  p_ext_data  Address of the EFT extra_op_data.
 *
 * \return  void.
 */
static void eft_initialize_events(OPERATOR_DATA *op_data, EFT_OP_DATA *p_ext_data)
{
84200be8:	c8 1c       	pushm <FP(=SP), rLink>;
    EARBUD_FIT_TEST_PARAMETERS *p_params = &p_ext_data->eft_cap_params;
84200bea:	19 30       	rMAC = r1 + 32;
    unsigned set_frames;

    set_frames = (p_params->OFFSET_EVENT_GOOD_FIT * EFT_FRAME_RATE);
84200bec:	89 88       	rMAC = M[rMAC + 8];
84200bee:	7d f1 92 c9 	r0 = rMAC * 250 (int);
    set_frames = set_frames >> EFT_TIMER_PARAM_SHIFT;
84200bf2:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("EFT Fit Detect Event Initialized at %u frames", set_frames);
    p_ext_data->fit_event_detect.set_frames = set_frames;
84200bf4:	da af       	M[r1 + 92] = r0;
    eft_clear_event(&p_ext_data->fit_event_detect);
84200bf6:	32 f0 58 20 	r0 = r1 + 88;
84200bfa:	c0 4f       	call (m) Lc_eft_clear_event_1;

84200bfc <Lc_eft_initialize_events_2>:

}
84200bfc:	c8 48       	popm <FP, rLink>;
84200bfe:	d8 4c       	rts;

84200c00 <Lc_eft_process_events_1>:
 *
 * \return  boolean indicating success or failure.
 */
static bool eft_process_events(OPERATOR_DATA *op_data,
                               EFT_OP_DATA *p_ext_data)
{
84200c00:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84200c02:	16 00       	r4 = r0 + Null;
    /* Current and previous fit quality */
    bool cur_fit = (p_ext_data->fit_quality == 1);
84200c04:	32 f0 41 82 	r0 = MBU[r1 + 65];
84200c08:	01 00       	rMAC = Null + Null;
84200c0a:	50 24       	Null = r0 - 1;
84200c0c:	20 f0 41 ce 	if EQ rMAC = Null + 1;
    bool prev_fit = (p_ext_data->prev_fit_quality == 1);
84200c10:	32 f0 42 82 	r0 = MBU[r1 + 66];
84200c14:	04 00       	r2 = Null + Null;
84200c16:	50 24       	Null = r0 - 1;
84200c18:	20 f0 44 ce 	if EQ r2 = Null + 1;
    EFT_EVENT* fit_event = &p_ext_data->fit_event_detect;
84200c1c:	32 f0 58 20 	r0 = r1 + 88;
    uint16 payload = EFT_EVENT_PAYLOAD_UNUSED;
84200c20:	87 20       	r5 = Null + 2;

    if (cur_fit)
84200c22:	08 04       	Null = rMAC - Null;
84200c24:	19 60       	if EQ jump (m) Lc_eft_process_events_9;

84200c26 <Lc_eft_process_events_2>:
    {
        if (prev_fit) /* Steady state for fit detect event */
84200c26:	20 04       	Null = r2 - Null;
84200c28:	11 60       	if EQ jump (m) Lc_eft_process_events_8;

84200c2a <Lc_eft_process_events_3>:
        {
            if (fit_event->running == EFT_EVENT_DETECTED)
84200c2a:	11 90       	rMAC = MBS[r0 + 8];
84200c2c:	48 24       	Null = rMAC - 1;
84200c2e:	0c 62       	if NE jump (m) Lc_eft_process_events_7;

84200c30 <Lc_eft_process_events_4>:
            {
                fit_event->frame_counter -= 1;
84200c30:	ff f2 11 d1 	rMAC = M[r0] + -1;
                if (fit_event->frame_counter <= 0)
84200c34:	11 ee       	M[r0 + Null] = rMAC;
84200c36:	08 62       	if NE jump (m) Lc_eft_process_events_7;

84200c38 <Lc_eft_process_events_5>:
                {
                    /* Payload 1 indicates good fit */
                    payload = EFT_EVENT_PAYLOAD_GOOD;
84200c38:	47 20       	r5 = Null + 1;
                    fit_event->running = EFT_EVENT_SENT;
84200c3a:	81 20       	rMAC = Null + 2;
84200c3c:	11 9a       	MB[r0 + 8] = rMAC;

84200c3e <Lc_eft_process_events_6>:

    if (payload != EFT_EVENT_PAYLOAD_UNUSED)
    {
        eft_send_event_trigger(op_data,
                               EFT_EVENT_ID_FIT,
                               payload);
84200c3e:	03 00       	r1 = Null + Null;
84200c40:	3c 00       	r2 = r5 + Null;
84200c42:	32 00       	r0 = r4 + Null;
84200c44:	9f 4f       	call (m) Lc_eft_send_event_trigger_1;

84200c46 <Lc_eft_process_events_7>:
    }
    return TRUE;
84200c46:	42 20       	r0 = Null + 1;
84200c48:	11 6e       	jump (m) Lc_eft_process_events_13;

84200c4a <Lc_eft_process_events_8>:
                fit_event->running == EFT_EVENT_DETECTED;
            }
        }
        else
        {
            fit_event->frame_counter -= 1;
84200c4a:	ff f2 11 d1 	rMAC = M[r0] + -1;
84200c4e:	11 ee       	M[r0 + Null] = rMAC;
            fit_event->running = EFT_EVENT_DETECTED;
84200c50:	41 20       	rMAC = Null + 1;
84200c52:	11 9a       	MB[r0 + 8] = rMAC;
84200c54:	f9 6f       	jump (m) Lc_eft_process_events_7;

84200c56 <Lc_eft_process_events_9>:
        }
    }
    else
    {
        if (prev_fit) /* Check if good fit message has been sent */
84200c56:	20 04       	Null = r2 - Null;
84200c58:	f7 61       	if EQ jump (m) Lc_eft_process_events_7;

84200c5a <Lc_eft_process_events_10>:
        {
            if (fit_event->running == EFT_EVENT_SENT)
84200c5a:	11 90       	rMAC = MBS[r0 + 8];
84200c5c:	88 24       	Null = rMAC - 2;
84200c5e:	02 62       	if NE jump (m) Lc_eft_process_events_12;

84200c60 <Lc_eft_process_events_11>:
            {
                /* if good fit message previously sent, send bad fit message
                    Payload 0 indicates bad fit */
                payload = EFT_EVENT_PAYLOAD_BAD;
84200c60:	07 00       	r5 = Null + Null;

84200c62 <Lc_eft_process_events_12>:
            }
            eft_clear_event(fit_event);
84200c62:	8c 4f       	call (m) Lc_eft_clear_event_1;
        }
    }

    if (payload != EFT_EVENT_PAYLOAD_UNUSED)
84200c64:	b8 24       	Null = r5 - 2;
84200c66:	ec 63       	if NE jump (m) Lc_eft_process_events_6;

84200c68 <Lc__ite_14>:
84200c68:	ef 6f       	jump (m) Lc_eft_process_events_7;

84200c6a <Lc_eft_process_events_13>:
        eft_send_event_trigger(op_data,
                               EFT_EVENT_ID_FIT,
                               payload);
    }
    return TRUE;
}
84200c6a:	f2 48       	popm <FP, r4, r5, rLink>;
84200c6c:	d8 4c       	rts;

84200c6e <Lc_eft_proc_destroy_1>:
 *
 * \return  boolean indicating success or failure.
 */

static bool eft_proc_destroy(EFT_OP_DATA *p_ext_data)
{
84200c6e:	f1 1c       	pushm <FP(=SP), r4, rLink>;
84200c70:	16 00       	r4 = r0 + Null;
    /* Unregister FFT twiddle */
    if (p_ext_data->twiddle_registered)
84200c72:	61 f0 75 82 	rMAC = MBU[r4 + 117];
84200c76:	08 60       	if EQ jump (m) Lc_eft_proc_destroy_3;

84200c78 <Lc_eft_proc_destroy_2>:
    {
        aanc_afb_twiddle_release(AANC_FILTER_BANK_WINDOW_SIZE);
84200c78:	02 f0 80 40 	r0 = Null + 128;
84200c7c:	ff fd a1 f3 	call 0x74ff8;
84200c80:	3c eb 
        p_ext_data->twiddle_registered = FALSE;
84200c82:	60 f0 75 8a 	MB[r4 + 117] = Null;

84200c86 <Lc_eft_proc_destroy_3>:
    }
    /* De-register scratch & free AFB */
    if (p_ext_data->scratch_registered)
84200c86:	61 f0 74 82 	rMAC = MBU[r4 + 116];
84200c8a:	06 60       	if EQ jump (m) Lc_eft_proc_destroy_5;

84200c8c <Lc_eft_proc_destroy_4>:
    {
        scratch_deregister();
84200c8c:	ff fd 05 f0 	call (m) 0x1872;
84200c90:	27 ef 
        p_ext_data->scratch_registered = FALSE;
84200c92:	60 f0 74 8a 	MB[r4 + 116] = Null;

84200c96 <Lc_eft_proc_destroy_5>:
    }

    aanc_afb_destroy(p_ext_data->p_afb_ref);
84200c96:	72 b8       	r0 = M[r4 + 100];
84200c98:	01 f0 3f e0 	call (m) $_aanc_afb_destroy;
    pfree(p_ext_data->p_afb_ref);
84200c9c:	72 b8       	r0 = M[r4 + 100];
84200c9e:	ff fd 2e f0 	call (m) 0x68d8;
84200ca2:	3b e1 
    aanc_afb_destroy(p_ext_data->p_afb_int);
84200ca4:	b2 b8       	r0 = M[r4 + 104];
84200ca6:	01 f0 31 e0 	call (m) $_aanc_afb_destroy;
    pfree(p_ext_data->p_afb_int);
84200caa:	b2 b8       	r0 = M[r4 + 104];
84200cac:	ff fd 2e f0 	call (m) 0x68d8;
84200cb0:	2d e1 

    aanc_fit100_destroy(p_ext_data->p_fit);
84200cb2:	f2 b8       	r0 = M[r4 + 108];
84200cb4:	01 f0 23 e5 	call (m) $_aanc_fit100_destroy;
    pfree(p_ext_data->p_fit);
84200cb8:	f2 b8       	r0 = M[r4 + 108];
84200cba:	ff fd 2e f0 	call (m) 0x68d8;
84200cbe:	3f e0 

    cbuffer_destroy(p_ext_data->p_tmp_ref_ip);
84200cc0:	32 89       	r0 = M[r4 + 16];
84200cc2:	ff fd 9b f0 	call (m) 0x1439a;
84200cc6:	39 e6 
    cbuffer_destroy(p_ext_data->p_tmp_int_ip);
84200cc8:	72 89       	r0 = M[r4 + 20];
84200cca:	ff fd 9b f0 	call (m) 0x1439a;
84200cce:	31 e6 

    unload_aanc_handle(p_ext_data->f_handle);
84200cd0:	32 b9       	r0 = M[r4 + 112];
84200cd2:	3e 4e       	call (m) $_unload_aanc_handle;

    return TRUE;
84200cd4:	42 20       	r0 = Null + 1;

84200cd6 <Lc_eft_proc_destroy_6>:
}
84200cd6:	f1 48       	popm <FP, r4, rLink>;
84200cd8:	d8 4c       	rts;

84200cda <$_EARBUD_FIT_TEST_GetDefaults>:
84200cda:	20 f0 ca 24 	Null = r0 - 202;
   0x00300000u,			// EVENT_GOOD_FIT
   0x00000001u			// BIN_SELECT
};

unsigned *EARBUD_FIT_TEST_GetDefaults(unsigned capid){
	switch(capid){
84200cde:	05 60       	if EQ jump (m) Lc_EARBUD_FIT_TEST_GetDefaults_3;

84200ce0 <Lc_EARBUD_FIT_TEST_GetDefaults_2>:
84200ce0:	01 f0 20 f0 	Null = r0 - 16546;
84200ce4:	a2 24 
84200ce6:	05 62       	if NE jump (m) Lc_EARBUD_FIT_TEST_GetDefaults_4;

84200ce8 <Lc_EARBUD_FIT_TEST_GetDefaults_3>:
		case 0x00CA: return defaults_earbud_fit_testEARBUD_FIT_TEST_16K;
84200ce8:	f8 ff 02 f0 	r0 = Null + -8388604;
84200cec:	04 40 
84200cee:	02 6e       	jump (m) Lc_EARBUD_FIT_TEST_GetDefaults_5;

84200cf0 <Lc_EARBUD_FIT_TEST_GetDefaults_4>:
		case 0x40A2: return defaults_earbud_fit_testEARBUD_FIT_TEST_16K;
	}
	return((unsigned *)0);
84200cf0:	02 00       	r0 = Null + Null;

84200cf2 <Lc_EARBUD_FIT_TEST_GetDefaults_5>:
84200cf2:	d8 4c       	rts;

84200cf4 <$kdc_start>:
.MODULE $M.kdc_start;
.CODESEGMENT PM;
.DATASEGMENT DM;

$kdc_start:
r0 = $_earbud_fit_test_16k_cap_data;
84200cf4:	07 f0 02 f0 	r0 = Null + 7340032;
84200cf8:	00 40 
    /* Force this symbol to be exported in ELF */
    Null = $___kymera_debug_map_addr;
84200cfa:	20 f0 f8 42 	Null = Null + 17144;
