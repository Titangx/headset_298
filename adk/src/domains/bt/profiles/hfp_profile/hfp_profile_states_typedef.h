/*!
    \copyright Copyright (c) 2022 Qualcomm Technologies International, Ltd.
        All Rights Reserved.
        Qualcomm Technologies International, Ltd. Confidential and Proprietary.
    \version %%version
    \file 
    \brief The hfp_profile_states c type definitions. This file is generated by D:/Work/Qcc/qcc514x-qcc304x-src_headset-ADK-22.2-CS1-r00298.1/adk/tools/packages/typegen/typegen.py.
*/

#ifndef _HFP_PROFILE_STATES_TYPEDEF_H__
#define _HFP_PROFILE_STATES_TYPEDEF_H__

#include <csrtypes.h>
#include <marshal_common.h>

#define HFP_SUB_STATE_INITIALISING          0x0001

/*! SLC States */
#define HFP_SUB_STATE_SLC_DISCONNECTED      0x0002
#define HFP_SUB_STATE_SLC_CONNECTING        0x0004
#define HFP_SUB_STATE_SLC_CONNECTED         0x0008
#define HFP_SUB_STATE_SLC_DISCONNECTING     0x0010

/*! Call States */
#define HFP_SUB_STATE_CALL_INCOMING         0x0020
#define HFP_SUB_STATE_CALL_OUTGOING         0x0040
#define HFP_SUB_STATE_CALL_ACTIVE           0x0080
#define HFP_SUB_STATE_CALL_HELD             0x0100
#define HFP_SUB_STATE_CALL_MULTIPARTY       0x0200

/*! Local vs. Remote */
#define HFP_SUB_STATE_REMOTE                0x0400
#define HFP_SUB_STATE_LOCAL                 0x0800

/*! Application HFP state machine states */
typedef enum 
{
    /*! Initial state */
    HFP_STATE_NULL                              = 0,
    /*! Initialising HFP instance */
    HFP_STATE_INITIALISING_HFP                  = HFP_SUB_STATE_INITIALISING,
    /*! No HFP connection, ready for remote connection */
    HFP_STATE_DISCONNECTED                      = HFP_SUB_STATE_SLC_DISCONNECTED,
    /*! Locally initiated connection in progress */
    HFP_STATE_CONNECTING_LOCAL                  = HFP_SUB_STATE_SLC_CONNECTING | HFP_SUB_STATE_LOCAL,
    /*! Remotely initiated connection is progress */
    HFP_STATE_CONNECTING_REMOTE                 = HFP_SUB_STATE_SLC_CONNECTING | HFP_SUB_STATE_REMOTE,
    /* HFP_STATE_CONNECTED (Parent state) */
    /*! HFP connected, no call in progress */
    HFP_STATE_CONNECTED_IDLE                    = HFP_SUB_STATE_SLC_CONNECTED,
    /*! HFP connected, outgoing call in progress */
    HFP_STATE_CONNECTED_OUTGOING                = HFP_SUB_STATE_SLC_CONNECTED | HFP_SUB_STATE_CALL_OUTGOING,
    /*! HFP connected, incoming call in progress */
    HFP_STATE_CONNECTED_INCOMING                = HFP_SUB_STATE_SLC_CONNECTED | HFP_SUB_STATE_CALL_INCOMING,
    /*! HFP connected, active call in progress */
    HFP_STATE_CONNECTED_ACTIVE                  = HFP_SUB_STATE_SLC_CONNECTED | HFP_SUB_STATE_CALL_ACTIVE,
    /*! HFP connected, active call in progress with second incoming call */
    HFP_STATE_CONNECTED_ACTIVE_WITH_INCOMING    = HFP_SUB_STATE_SLC_CONNECTED | HFP_SUB_STATE_CALL_ACTIVE | HFP_SUB_STATE_CALL_INCOMING,
    /*! HFP connected, active call in progress with second incoming call */
    HFP_STATE_CONNECTED_ACTIVE_WITH_OUTGOING    = HFP_SUB_STATE_SLC_CONNECTED | HFP_SUB_STATE_CALL_ACTIVE | HFP_SUB_STATE_CALL_OUTGOING,
    /*! HFP connected, active call in progress with second incoming call */
    HFP_STATE_CONNECTED_ACTIVE_WITH_HELD        = HFP_SUB_STATE_SLC_CONNECTED | HFP_SUB_STATE_CALL_ACTIVE | HFP_SUB_STATE_CALL_HELD,
    /*! HFP connected, active call in progress with second incoming call */
    HFP_STATE_CONNECTED_HELD                    = HFP_SUB_STATE_SLC_CONNECTED | HFP_SUB_STATE_CALL_HELD,
    /*! HFP connected, active call in progress with second incoming call */
    HFP_STATE_CONNECTED_MULTIPARTY              = HFP_SUB_STATE_SLC_CONNECTED | HFP_SUB_STATE_CALL_ACTIVE| HFP_SUB_STATE_CALL_MULTIPARTY,
    /*! HFP disconnecting in progress */
    HFP_STATE_DISCONNECTING                     = HFP_SUB_STATE_SLC_DISCONNECTING
} hfpState;

#endif /* _HFP_PROFILE_STATES_TYPEDEF_H__ */

