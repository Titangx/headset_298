/*!
    \copyright Copyright (c) 2022 Qualcomm Technologies International, Ltd.
        All Rights Reserved.
        Qualcomm Technologies International, Ltd. Confidential and Proprietary.
    \version %%version
    \file 
    \brief The avrcp c type definitions. This file is generated by D:/Work/Qcc/qcc514x-qcc304x-src_headset-ADK-22.2-CS1-r00298.1/adk/tools/packages/typegen/typegen.py.
*/

#ifndef _AVRCP_TYPEDEF_H__
#define _AVRCP_TYPEDEF_H__

#include <csrtypes.h>
#include <marshal_common.h>
#include <avrcp.h>
#include <task_list.h>

/*! Flag used on AVRCP states to indicate if the state represents an activity
    that will finish. */
#define AVRCP_STATE_LOCK (0x10)

/*! AVRCP task data bitfields structure */
typedef struct 
{
    /*! Last sent AVRCP operation ID, used to determine which confirmation or error tone to play */
    unsigned op_id:8;
    /*! Last sent AVRCP operation state, used to determine if operation was button press or release */
    unsigned op_state:1;
    /*! Last sent AVRCP operation was a repeat */
    unsigned op_repeat:1;
    /*! Does volume_time field contain valid time */
    unsigned volume_time_valid:1;
    /*! Bitmask of events supported. See the avrcp_supported_events enum. */
    unsigned supported_events:13;
    /*! Bitmask of events that have changed but notifications not sent. See the avrcp_supported_events enum. */
    unsigned changed_events:13;
    /*! Bitmask of events that we have registered successfully. See the avrcp_supported_events enum. */
    unsigned registered_events:13;
    /*! Temporarily suppress changes in absolute volume */
    unsigned suppress_absolute_volume:1;
} avrcpTaskDataBitfields;

/*! Application AVRCP state machine states */
typedef enum 
{
    /*! Initial state */
        AVRCP_STATE_NULL = 0,
        /*! No AVRCP connection */
        AVRCP_STATE_DISCONNECTED = 1,
        /*! Locally initiated connection in progress */
        AVRCP_STATE_CONNECTING_LOCAL = 2 + AVRCP_STATE_LOCK,
        /*! Remotely initiated connection is progress */
        AVRCP_STATE_CONNECTING_REMOTE = 3 + AVRCP_STATE_LOCK,
        /*! Control channel connected */
        AVRCP_STATE_CONNECTED = 4,
        /*! Disconnecting control channel */
        AVRCP_STATE_DISCONNECTING = 5 + AVRCP_STATE_LOCK
} avAvrcpState;

/*! AVRCP task data structure */
typedef struct 
{
    /*! AVRCP profile library instance */
    AVRCP *avrcp;
    /*! Task to receive vendor commands */
    Task vendor_task;
    /*! Data for current vendor command */
    uint8 *vendor_data;
    /*! AVRCP operation lock, used to serialise AVRCP operations */
    uint16 lock;
    /*! Register notification lock, used to serialise notifications */
    uint16 notification_lock;
    /*! Playback status lock, set when AVRCP Play or Pause sent.  Cleared when playback status received, or after timeout */
    uint16 playback_lock;
    /*! Operation identifier of the current vendor command */
    uint16 vendor_opid;
    /*! AVRCP bitfields data */
    avrcpTaskDataBitfields bitfields;
    /*! Current state of AVRCP state machine */
    avAvrcpState state;
    /*! Current play status of the AVRCP connection. This is not always known. See \ref avrcp_play_hint */
    avrcp_play_status play_status;
    /*! Our local guess at the play status. Not always accurate. */
    avrcp_play_status play_hint;
    /*! Time of last volume change, only valid if volume_time_valid is set */
    rtime_t volume_time;
} avrcpTaskData;

#endif /* _AVRCP_TYPEDEF_H__ */

