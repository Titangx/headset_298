/*!
    \copyright Copyright (c) 2022 Qualcomm Technologies International, Ltd.
        All Rights Reserved.
        Qualcomm Technologies International, Ltd. Confidential and Proprietary.
    \version %%version
    \file 
    \brief The connection_manager_list c type definitions. This file is generated by D:/Work/Qcc/qcc514x-qcc304x-src_headset-ADK-22.2-CS1-r00298.1/adk/tools/packages/typegen/typegen.py.
*/

#ifndef _CONNECTION_MANAGER_LIST_TYPEDEF_H__
#define _CONNECTION_MANAGER_LIST_TYPEDEF_H__

#include <csrtypes.h>
#include <marshal_common.h>
#include <task_list.h>
#include <connection_manager.h>
#include <link_policy.h>
#include <connection_no_ble.h>

/*! Flag used on ACL states to indicate if the state represents an activity
    that will finish. */
#define ACL_STATE_LOCK (0x08)
#define MARSHAL_TYPE_lp_power_mode MARSHAL_TYPE_uint8

/*! Internal state for an individual ACL link */
typedef enum 
{
    /*! The ACL is connecting. Lock variables will clear once connected, or failed */
        ACL_CONNECTING              = 0 + ACL_STATE_LOCK,
        /*! The ACL is connected. */
        ACL_CONNECTED                = 1,
        /*! The ACL is searching for a matching SDP record. Lock variables will clear
            once completed. */
        ACL_CONNECTED_SDP_SEARCH     = 2 + ACL_STATE_LOCK,
        /*! The ACL is disconnected. */
        ACL_DISCONNECTED             = 3,
        /*! The ACL is disconected due to link-loss. */
        ACL_DISCONNECTED_LINK_LOSS   = 4,
        /*! The ACL is waiting on LE scan to pause */
        ACL_CONNECTING_PENDING_PAUSE = 5 + ACL_STATE_LOCK,
        /*! ACL creation sent internally  */
        ACL_CONNECTING_INTERNAL = 6 + ACL_STATE_LOCK,
} cm_connection_state_t;

/*! Connection Manager Device bitfields */
typedef struct 
{
    /*! State of the device */
    cm_connection_state_t state:4;
    /*! Number of functions interested in this device currently, The count relies on calls to \ref ConManagerCreateAcl and \ref ConManagerReleaseAcl being paired */
    unsigned users:3;
    /*! Flag that indicates if this is an incoming ACL */
    bool local:1;
    /*! Flag to indicate if qlmp connection is established */
    bool qlmp_connected:1;
    /*! Flag to indicate if qhs is supported */
    bool qhs_supported:1;
    /*! Flag to indicate if qhs is connected */
    bool qhs_connected:1;
    /*! Flag to indicate if fast exit from sniff subrate is supported */
    bool fast_exit_sniff_subrate_supported:1;
} cm_con_bitfields_t;

/*! Structure used to hold information about a single device, managed by the connection manager. This structure should not be accessed directly. */
typedef struct 
{
    /*! The connection's task */
    TaskData task_data;
    /*! Bluetooth address of the device */
    tp_bdaddr tpaddr;
    /*! A non-zero value indicates that a procedure is operational on the device. It will clear to 0 when complete */
    uint16 lock;
    /*! Connection Manager Device bitfields */
    cm_con_bitfields_t bitfields;
    /*! The current link policy for this connection */
    lpPerConnectionState lp_state;
    /*! The most recently requested QoS for this connection */
    uint8 qos_list[cm_qos_max];
    /*! The present power mode for this connection */
    lp_power_mode mode;
    /*! The present sniff interval(in slots) for this connection */
    uint16 sniff_interval;
    /*! The present connection interval (in 1.25ms slots) for this connection */
    uint16 conn_interval;
    /*! The present slaves latency (in connection events) for this connection */
    uint16 slave_latency;
    /*! Conditional block if a paremeter update is in progress */
    uint16 le_update_in_progress;
} cm_connection_t;

#endif /* _CONNECTION_MANAGER_LIST_TYPEDEF_H__ */

